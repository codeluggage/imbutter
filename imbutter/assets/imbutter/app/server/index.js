//__HEAD__
var Me=Object.create,B=Object.defineProperty,je=Object.getPrototypeOf,Oe=Object.prototype.hasOwnProperty,Fe=Object.getOwnPropertyNames,He=Object.getOwnPropertyDescriptor;var Ae=r=>B(r,"__esModule",{value:!0});var ke=(r,e,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of Fe(e))!Oe.call(r,s)&&s!=="default"&&B(r,s,{get:()=>e[s],enumerable:!(t=He(e,s))||t.enumerable});return r},m=r=>ke(Ae(B(r!=null?Me(je(r)):{},"default",r&&r.__esModule&&"default"in r?{get:()=>r.default,enumerable:!0}:{value:r,enumerable:!0})),r);function M(r){let e;return r&&((e=r.toIterable)?e.call(r):r)}var Ye=Symbol.for("#__initor__"),Ze=Symbol.for("#__inited__"),qe=Symbol.for("#__hooks__"),et=Symbol.for("#type"),tt=Symbol.for("#__listeners__");function E(r,e=null){let t={},s=/\$\$\d+\$\$/,n=function(i){return t[i]||(t[i]=e?e(i):{})},o=function(i,a){if(typeof a=="string"){if(a[0]=="$"&&s.test(a))return n(a)}else if(typeof i=="string"&&i[0]=="$"&&s.test(i)){let h=n(i);return Object.assign(h,a),h}return a};return JSON.parse(r,o)}function L(r,e){var t,s,n,o;let l={},i={added:[],changed:[],removed:[],all:[],urls:{}};if(r.assets)for(let a=0,h=M(r.assets),f=h.length;a<f;a++){let u=h[a],c=u.originalPath||u.path;l[c]=u,u.url&&((t=e.urls)[s=u.url]||(t[s]=u))}for(let a=0,h=M(e.assets||[]),f=h.length;a<f;a++){let u=h[a],c=u.originalPath||u.path,g=l[c];u.url&&r.urls&&(r.urls[u.url]=u),g?(g.hash!=u.hash&&(g.invalidated=Date.now(),g.replacedBy=u,u.replaces=g,i.changed.push(u),i.all.push(u),g==r.main&&(i.main=u)),n=l[c],delete l[c]):(i.added.push(u),i.all.push(u))}for(let a=0,h=Object.keys(l),f=h.length,u,c;a<f;a++)u=h[a],c=l[u],c.removed=Date.now(),i.all.push(c);for(let a=0,h=M(i.all),f=h.length;a<f;a++){let u=h[a];(i[o=u.type]||(i[o]=[])).push(u)}return i.removed=Object.values(l),e.changes=i,e}var N=m(require("events")),v=m(require("fs")),w=m(require("path"));var z=Symbol.for("#__initor__"),J=Symbol.for("#__inited__"),U=Symbol.for("#__hooks__"),De=Symbol.for("#refresh"),W=Symbol.for("#__init__"),j=Symbol.for("#manifest"),V=Symbol.for("#absPath"),O=Symbol.for("#raw"),G=Symbol.for("#watch"),K=Symbol(),Q=class{constructor(e){this[j]=e}get absPath(){return this[V]||(this[V]=this[j].resolve(this))}get name(){return w.default.basename(this.path)}get body(){return this.readSync()}readSync(){return v.default.readFileSync(this.absPath,"utf-8")}pipe(e){return v.default.createReadStream(this.absPath).pipe(e)}toString(){return this.url||this.absPath}},X=class extends N.EventEmitter{static[W](){return this.prototype[z]=K,this}constructor(e={}){var t;super();t=this,this.options=e,this.data={},this.path=e.path,this.refs={},t.reviver=function(s){return new Q(t)},t.init(e.data),this[z]===K&&(this[U]&&this[U].inited(this),this[J]&&this[J]())}get srcdir(){return w.default.resolve(w.default.dirname(this.path),this.data.srcdir)}get outdir(){return w.default.resolve(w.default.dirname(this.path),this.data.outdir)}get changes(){return this.data.changes||{}}get inputs(){return this.data.inputs}get outputs(){return this.data.outputs}get assets(){return this.data.assets}get urls(){return this.data.urls||{}}get main(){return this.data.main}get cwd(){return process.cwd()}get raw(){return this.data[O]}resolve(e){return e._=="input"?w.default.resolve(this.srcdir||this.cwd,e.path):e._=="output"?w.default.resolve(this.outdir,e.path):w.default.resolve(this.cwd,e.path||e)}resolveAssetPath(e){return w.default.resolve(this.outdir,e)}read(e){return v.default.readFileSync(this.resolve(e),"utf-8")}loadFromFile(e){return v.default.existsSync(e)?v.default.readFileSync(e,"utf-8"):"{}"}init(e=null){return(e||this.path)&&this.update(e),this}update(e){if(e==null&&(this.path?e=this.loadFromFile(this.path):console.warn("cannot update manifest without path")),typeof e=="string"){let t=e;e=E(e,this.reviver),e[O]=t}return this.data=L(this.data||{},e),this.data.changes.all.length&&this.emit("change",this.diff,this),this.data.changes.main&&this.emit("change:main",this.data.main,this),this.data.changes}serializeForBrowser(){return this.data[O]}[De](e){return!0}watch(){var e=this;if(this[G]!=!0?(this[G]=!0,!0):!1)return e.path&&!process.env.IMBA_HMR&&v.default.watch(this.path,function(t,s){let n=v.default.existsSync(e.path),o=n&&v.default.statSync(e.path);n&&e.update()})}on(e,t){return this.watch(),super.on(...arguments)}};X[W]();var Y=class{static for(e){return new Proxy({},new this(e))}constructor(e){this.getter=e}get target(){return this.getter()}get(e,t){return this.target[t]}set(e,t,s){return this.target[t]=s,!0}},p=Y.for(function(){return globalThis[j]});var H=m(require("cluster")),$=m(require("fs")),P=m(require("path")),ie=m(require("events"));var F=m(require("perf_hooks")),x=Symbol.for("#spinner"),ot=Symbol.for("#__initor__"),lt=Symbol.for("#__inited__"),at=Symbol.for("#__hooks__"),Ie=Symbol.for("#ctime"),Z=Symbol.for("#IMBA_OPTIONS"),Ee={reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29],black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},y={bold:function(r){return"[1m"+r+"[22m"},red:function(r){return"[31m"+r+"[39m"},green:function(r){return"[32m"+r+"[39m"},yellow:function(r){return"[33m"+r+"[39m"},blue:function(r){return"[94m"+r+"[39m"},gray:function(r){return"[90m"+r+"[39m"},white:function(r){return"[37m"+r+"[39m"},f:function(r,e){let t=Ee[r];return"["+t[0]+"m"+e+"["+t[1]+"m"}};y.warn=y.yellow;y.error=y.red;var C=process.platform!=="win32"||process.env.CI||process.env.TERM==="xterm-256color",Le={info:y.f("yellowBright",C?"\u2139":"i"),success:y.green(C?"\u2714":"\u221A"),warning:y.yellow(C?"\u26A0":"!!"),error:y.red(C?"\xD7":"\u2716"),debug:y.blue(C?"\u2139":"i")},q=["debug","info","success","warning","error","silent"],Ne={"-1":"socket","4":"ip4","6":"ip6"};function ze(r){let e=y.f;return r=r.replace(/https?\:[^\s\n\)\]]+/g,function(t){return e("blueBright",t)}),r=r.replace(/^[\t\s]*\>[^\n]+/gm,function(t){return e("bold",t)}),r=r.replace(/\t/g,"  "),r=r.replace(/^/gm,"  "),r}function ee(r,...e){let t=y.f;return r=r.replace(/\%([\w\.]+)/g,function(s,n){let o=e.shift();if(n=="markdown")return ze(o);if(n=="kb")return t("dim",(o/1e3).toFixed(1)+"kb");if(n=="path"||n=="bold")return t("bold",o);if(n=="dim")return t("dim",o);if(n=="address"){let l=Ne[o.addressType];return o.port?t("blueBright",[o.address||"http://127.0.0.1",o.port].join(":")):t("blueBright",l)}else{if(n=="ms")return t("yellow",Math.round(o)+"ms");if(n=="d")return t("blueBright",o);if(n=="red")return t("redBright",o);if(n=="green")return t("greenBright",o);if(n=="yellow")return t("yellowBright",o);if(n=="ref")return t("yellowBright","#"+(o.id||o));if(n=="elapsed"){o!=null&&e.unshift(o);let l=F.performance.now();return t("yellow",Math.round(l)+"ms")}else if(n=="heap"){o!=null&&e.unshift(o);let l=process.memoryUsage().heapUsed/1024/1024;return t("yellow",l.toFixed(2)+"mb")}else return o}}),[r,...e]}var te=null,re=null,se=class{static get main(){return re||(re=new this)}constructor({prefix:e=null,loglevel:t}={}){this[Ie]=Date.now(),this.prefix=e?ee(...e)[0]:"",this.loglevel=t||process.env.IMBA_LOGLEVEL||globalThis[Z]&&globalThis[Z].loglevel||"info"}write(e,...t){if(q.indexOf(e)<q.indexOf(this.loglevel))return this;let s=Le[e]||e,[n,...o]=ee(...t);return this.prefix&&(n=this.prefix+n),this[x]&&this[x].isSpinning?(e=="success"&&(this[x].clear(),console.log(s+" "+n,...o),this[x].frame()),this[x].text=n):console.log(s+" "+n,...o)}debug(...e){return this.write("debug",...e)}log(...e){return this.write("info",...e)}info(...e){return this.write("info",...e)}warn(...e){return this.write("warn",...e)}error(...e){return this.write("error",...e)}success(...e){return this.write("success",...e)}ts(...e){return this.write("debug",...e,F.performance.now())}spinner(){}get[x](){return te}get proxy(){var e=this;let t=function(...s){return e.info(...s)};return t.info=e.info.bind(e),t.warn=e.warn.bind(e),t.error=e.error.bind(e),t.debug=e.debug.bind(e),t.success=e.success.bind(e),t.ts=e.ts.bind(e),t.logger=e,t}async time(e,t){let s=Date.now();if(t){let n=await t();return this.info(""+e+" %ms",Date.now()-s),n}}},ne=new se().proxy;var Je=m(require("module")),oe=m(require("http")),pt=m(require("https")),le=m(require("http2"));function d(r){let e;return r&&((e=r.toIterable)?e.call(r):r)}var ae=Symbol.for("#setup"),ue=Symbol.for("#__initor__"),he=Symbol.for("#__inited__"),fe=Symbol.for("#__hooks__"),pe=Symbol.for("#__init__"),ce=Symbol.for("#setup?"),me=Symbol.for("#watch"),Ue=Symbol.for("#dom"),We=Symbol.for("#server"),Ve=Symbol.for("#raw"),de=Symbol(),A={html:{"Content-Type":"text/html"},js:{"Content-Type":"text/javascript"},mjs:{"Content-Type":"text/javascript"},json:{"Content-Type":"application/json"},css:{"Content-Type":"text/css"},otf:{"Content-Type":"font/otf"},ttf:{"Content-Type":"font/ttf"},woff:{"Content-Type":"font/woff"},woff2:{"Content-Type":"font/woff2"},svg:{"Content-Type":"image/svg+xml"},avif:{"Content-Type":"image/avif"},gif:{"Content-Type":"image/gif"},png:{"Content-Type":"image/png"},apng:{"Content-Type":"image/apng"},webp:{"Content-Type":"image/webp"},jpg:{"Content-Type":"image/jpeg"},jpeg:{"Content-Type":"image/jpeg"},bmp:{"Content-Type":"image/bmp"},webm:{"Content-Type":"video/webm"},weba:{"Content-Type":"audio/webm"},avi:{"Content-Type":"video/x-msvideo"},mp3:{"Content-Type":"audio/mpeg"},mp4:{"Content-Type":"video/mp4"},m4a:{"Content-Type":"audio/m4a"},mpeg:{"Content-Type":"video/mpeg"},wav:{"Content-Type":"audio/wav"},ogg:{"Content-Type":"audio/ogg"},ogv:{"Content-Type":"video/ogg"},oga:{"Content-Type":"audio/ogg"},opus:{"Content-Type":"audio/opus"}},_=globalThis.process,ge=class extends Set{call(e,...t){var s;s=[];for(let n of d(this))s.push(n[e](...t));return s}close(e={}){var t;t=[];for(let s of d(this))t.push(s.close(e));return t}reload(e={}){var t;t=[];for(let s of d(this))t.push(s.reload(e));return t}broadcast(e,...t){var s;s=[];for(let n of d(this))s.push(n.broadcast(e,...t));return s}emit(e,t){var s;s=[];for(let n of d(this))s.push(n.emit(e,t));return s}},S=new ge,be=new(class extends ie.EventEmitter{static[pe](){return this.prototype[ue]=de,this}constructor(){var e;super(...arguments);e=this,this.autoreload=!1,this.state={},H.default.isWorker&&_.on("message",function(t){if(e.emit("message",t),t[0]=="emit")return e.emit(...t.slice(1))}),this[ue]===de&&(this[fe]&&this[fe].inited(this),this[he]&&this[he]())}[ae](){var e=this;if(!!(this[ce]!=!0?(this[ce]=!0,!0):!1))return e.on("reloading",function(t){var s;console.log("is reloading - from outside"),e.state.reloading=!0,s=[];for(let n of d(S))s.push(n.pause());return s}),e.on("reloaded",async function(t){var s;e.state.reloaded=!0,console.log("is reloaded - from outside"),s=[];for(let o of d(S))s.push(o.close());let n=s;return setTimeout(function(){return _.exit(0)},100),await Promise.all(n),_.exit(0)}),e.on("manifest:change",function(t){if(_.env.IMBA_HMR)return p.update(t)}),e.on("manifest:error",function(t){if(_.env.IMBA_HMR)return p.errors=t,S.broadcast("errors",p.errors)}),!0}send(e){if(_.send instanceof Function)return _.send(e)}on(e,t){return e=="change"&&this.watch(),super.on(...arguments)}watch(){var e=this;if(this[me]!=!0?(this[me]=!0,!0):!1)return p.on("change:main",function(){return e.emit("change",p)})}reload(){if(!(this.isReloading!=!0?(this.isReloading=!0,!0):!1))return this;if(this.state.reloading=!0,!_.env.IMBA_SERVE){console.warn("not possible to gracefully reload servers not started via imba start");return}this.send("reload")}}[pe]()),ye=class{constructor(e,t={}){this.url=e,[this.path,this.query]=e.split("?"),this.ext=P.default.extname(this.path),this.headers={"Content-Type":"text/plain","Access-Control-Allow-Origin":"*","cache-control":"public"},Object.assign(this.headers,A[this.ext.slice(1)]||{})}respond(e,t){let s=p.urls[this.url],n=this.headers,o=s?p.resolve(s):p.resolveAssetPath("public"+this.path);if(!o)return console.log("found no path for",s,this.url),t.writeHead(404,{}),t.end();if(s&&(s.ttl>0&&(n["cache-control"]="max-age="+s.ttl),s.imports)){let l=[];for(let i=0,a=d(s.imports),h=a.length;i<h;i++){let f=a[i];l.push("<"+f.url+">; rel=modulepreload; as=script")}n.Link=l.join(", ")}return $.default.access(o,$.default.constants.R_OK,function(l){if(l)return console.log("could not find path",o),t.writeHead(404,{}),t.end();try{let i=$.default.createReadStream(o);return t.writeHead(200,n),i.pipe(t)}catch(i){return t.writeHead(503,{}),t.end()}})}createReadStream(){return $.default.createReadStream(this.path)}pipe(e){return this.createReadStream().pipe(e)}},_e=class{static wrap(e,t={}){return new this(e,t)}constructor(e,t){var s=this;S.add(this),this.id=Math.random(),this.options=t,this.closed=!1,this.paused=!1,this.server=e,this.clients=new Set,this.stalledResponses=[],this.assetResponders={},_.env.IMBA_PATH&&(this.devtoolsPath=P.default.resolve(_.env.IMBA_PATH,"dist","hmr.js")),this.scheme=e instanceof oe.default.Server?"http":"https";let n=this.server._events.request,o=globalThis[Ue];e.off("request",n),n[We]=this,e.on("listening",function(){let l=s.server.address(),i=l.address;(i=="::"||i=="0.0.0.0")&&(i="localhost");let a=""+s.scheme+"://"+i+":"+l.port+"/";return ne.info("listening on %bold",a)}),p.on("change",function(l,i){return s.broadcast("manifest",i.data[Ve])}),s.handler=function(l,i){var a;let h=l instanceof le.Http2ServerRequest,f=l.url,u="/__assets__/";if(s.paused||s.closed)return i.statusCode=302,i.setHeader("Location",l.url),h||i.setHeader("Connection","close"),s.closed?(h&&l.stream.session.close(),i.end()):s.stalledResponses.push(i);if(f=="/__hmr__.js"&&s.devtoolsPath){let b=$.default.createReadStream(s.devtoolsPath);return i.writeHead(200,A.js),b.pipe(i)}if(f=="/__hmr__"){let b={"Content-Type":"text/event-stream","Cache-Control":"no-cache"};return h||(b.Connection="keep-alive"),i.writeHead(200,b),s.clients.add(i),s.broadcast("init",p.serializeForBrowser(),[i]),l.on("close",function(){return s.clients.delete(i)}),!0}if(f.indexOf(u)==0||p.urls[f])return((a=s.assetResponders)[f]||(a[f]=new ye(f,s))).respond(l,i);let c=l.headers,g;if(h?g=c[":scheme"]+"://"+c[":authority"]:g=(l.connection.encrypted?"https":"http")+"://"+c.host,t.static){let b=new URL(f,g),Re=P.default.extname(b.pathname),k=A[Re.slice(1)];if(k){let D=P.default.resolve(p.cwd,"."+b.pathname);if($.default.existsSync(D)){$.default.readFile(D,function(I,Be){return I?(i.writeHead(500,{}),i.write("Error getting the file: "+I)):(i.writeHead(200,k),i.end(Be))});return}}}if(o){let b=new o.Location(l.url,g);return o.Document.create({location:b},function(){return n(l,i)})}else return n(l,i)},e.on("request",s.handler),e.on("close",function(){return console.log("server is closing!!!")}),H.default.isWorker&&(be[ae](),be.send("serve"))}broadcast(e,t={},s=this.clients){t=JSON.stringify(t);let n="data: "+t+`


`;for(let o of d(s))o.write("event: "+e+`
`),o.write(`id: imba
`),o.write(n);return this}pause(){return(this.paused!=!0?(this.paused=!0,!0):!1)&&this.broadcast("paused"),this}resume(){if(this.paused!=!1?(this.paused=!1,!0):!1)return this.broadcast("resumed"),this.flushStalledResponses()}flushStalledResponses(){for(let e=0,t=d(this.stalledResponses),s=t.length;e<s;e++)t[e].end();return this.stalledResponses=[]}close(){var e=this;return this.pause(),new Promise(function(t){return e.closed=!0,e.server.close(t),e.flushStalledResponses()})}};function we(r,...e){return _e.wrap(r,...e)}var bt=Symbol.for("#__initor__"),yt=Symbol.for("#__inited__"),_t=Symbol.for("#__hooks__"),ve=Symbol.for("#__init__"),Ge=Symbol.for("#__patch__"),$e=Symbol.for("#warned"),T=Symbol.for("#asset"),R=class{static wrap(e){let t=new R(e);return new Proxy(t,t)}constructor(e){this.meta=e}get input(){return p.inputs[this.meta.input]}get asset(){return globalThis._MF_?this.meta:this.input?this.input.asset:null}set(e,t,s){return!0}get(e,t){return this.meta.meta&&this.meta.meta[t]!=null?this.meta.meta[t]:this.asset?t=="absPath"&&!this.asset.absPath?this.asset.url:this.asset[t]:((this.meta[$e]!=!0?(this.meta[$e]=!0,!0):!1)&&console.warn("Asset for '"+this.meta.input+"' not found"),t=="valueOf"?function(){return""}:null)}},xe=class{[Ge](e={}){var t;(t=e.url)!==void 0&&(this.url=t),(t=e.meta)!==void 0&&(this.meta=t)}constructor(e=null){this[ve](e)}[ve](e=null){this.url=e?e.url:void 0,this.meta=e?e.meta:void 0}adoptNode(e){var t;if((t=this.meta)==null?void 0:t.content){for(let s=this.meta.attributes,n=0,o=Object.keys(s),l=o.length,i,a;n<l;n++)i=o[n],a=s[i],e.setAttribute(i,a);e.innerHTML=this.meta.content}return this}toString(){return this.url}toStyleString(){return"url("+this.url+")"}};function Se(r){var e,t;if(r[T])return r[T];if(r.type=="svg")return r[T]||(r[T]=new xe(r));if(r.input){let s=globalThis._MF_&&globalThis._MF_[r.input];return s&&(Object.assign(r,s),r.toString=function(){return this.absPath}),r[T]||(r[T]=R.wrap(r))}return r}var Ce=m(require("express"));var Te=Se({input:"entry:app/client/index.html"});var Pe=(0,Ce.default)();Pe.get(/.*/,function(r,e){return r.accepts(["image/*","html"])!="html"?e.sendStatus(404):e.send(Te.body)});we(Pe.listen(process.env.PORT||3e3));
//__FOOT__
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vbm9kZV9tb2R1bGVzL2ltYmEvc3JjL2ltYmEvdXRpbHMuaW1iYSIsICIuLi8uLi9ub2RlX21vZHVsZXMvaW1iYS9zcmMvaW1iYS9tYW5pZmVzdC5pbWJhIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9pbWJhL3NyYy9pbWJhL3Byb2Nlc3MuaW1iYSIsICIuLi8uLi9ub2RlX21vZHVsZXMvaW1iYS9zcmMvdXRpbHMvbG9nZ2VyLmltYmEiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL2ltYmEvc3JjL2ltYmEvYXNzZXQuaW1iYSIsICJpbmRleC5pbWJhIiwgImVudHJ5OmFwcC9jbGllbnQvaW5kZXguaHRtbCJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgZGFzaFJlZ2V4ID0gLy0uL2dcblxuZXhwb3J0IGNsYXNzIExhenlQcm94eVxuXHRzdGF0aWMgZGVmIGZvciBnZXR0ZXJcblx0XHRuZXcgUHJveHkoe30sIG5ldyBzZWxmKGdldHRlcikpXG5cblx0ZGVmIGNvbnN0cnVjdG9yIGdldHRlclxuXHRcdGdldHRlciA9IGdldHRlclxuXHRcblx0Z2V0IHRhcmdldFxuXHRcdGdldHRlciFcblxuXHRkZWYgZ2V0IF8sIGtleVxuXHRcdHRhcmdldFtrZXldXG5cdFxuXHRkZWYgc2V0IF8sIGtleSwgdmFsdWVcblx0XHR0YXJnZXRba2V5XSA9IHZhbHVlXG5cdFx0cmV0dXJuIHRydWVcblxuZXhwb3J0IGRlZiBwcm94eSBnZXR0ZXIsIHBsYWNlaG9sZGVyID0ge31cblx0bmV3IFByb3h5KHBsYWNlaG9sZGVyLCBuZXcgTGF6eVByb3h5KGdldHRlcikpXG5cbmV4cG9ydCBkZWYgcGFyc2VUaW1lIHZhbHVlXG5cdGxldCB0eXAgPSB0eXBlb2YgdmFsdWVcblx0aWYgdHlwID09ICdudW1iZXInXG5cdFx0cmV0dXJuIHZhbHVlXG5cblx0aWYgdHlwID09ICdzdHJpbmcnXG5cdFx0aWYgKC9eXFxkK2ZwcyQvKS50ZXN0KHZhbHVlKVxuXHRcdFx0cmV0dXJuIDEwMDAgLyBwYXJzZUZsb2F0KHZhbHVlKVxuXHRcdGVsaWYgKC9eKFstK10/W1xcZFxcLl0rKXMkLykudGVzdCh2YWx1ZSlcblx0XHRcdHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKSAqIDEwMDBcblx0XHRlbGlmICgvXihbLStdP1tcXGRcXC5dKyltcyQvKS50ZXN0KHZhbHVlKVxuXHRcdFx0cmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpXG5cdCMgdGhyb3cgb3IgcmV0dXJuIE5hTj9cblx0cmV0dXJuIG51bGxcblx0XG5cbmV4cG9ydCBkZWYgc2VyaWFsaXplRGF0YSBkYXRhXG5cdGxldCBtYXAgPSBuZXcgTWFwXG5cdGxldCBhcnIgPSBbXVxuXHRsZXQgbG9nZ2luZyA9IG5vXG5cdGxldCByZXBsYWNlciA9IGRvKGtleSx2YWx1ZSlcblx0XHRpZiB2YWx1ZSBhbmQgdmFsdWUuI3R5cGUgYW5kIGtleSAhPT0gJydcblx0XHRcdGxldCByZWYgPSBtYXAuZ2V0KHZhbHVlKSAjIHZhbHVlW3N5bV0gfHw9IFwiJCR7bnIrK30kJFwiXG5cdFx0XHR1bmxlc3MgbWFwLmhhcyh2YWx1ZSlcblx0XHRcdFx0bWFwLnNldCh2YWx1ZSxyZWYgPSBcIiQke2Fyci5sZW5ndGh9JCRcIilcblx0XHRcdFx0YXJyLnB1c2godmFsdWUpXG5cdFx0XHRyZXR1cm4ga2V5ID09IG51bGwgPyB2YWx1ZSA6IHJlZlxuXHRcdHZhbHVlXG5cblx0bGV0IGpzb24gPSBKU09OLnN0cmluZ2lmeShkYXRhLHJlcGxhY2VyLDIpXG5cdGxldCBpID0gMFxuXHRsb2dnaW5nID0geWVzXG5cdHdoaWxlIGkgPCBhcnIubGVuZ3RoXG5cdFx0YXJyW2ldID0gSlNPTi5zdHJpbmdpZnkoYXJyW2ldLHJlcGxhY2VyLDIpXG5cdFx0aSsrXG5cblx0bGV0IGluamVjdCA9IFwiXCJcblx0Zm9yIGl0ZW0saSBpbiBhcnJcblx0XHRpbmplY3QgKz0gXCJcXFwiJCR7aX0kJFxcXCI6e2l0ZW19LFxcblwiXG5cdGpzb24gPSAneycgKyBpbmplY3QgKyBqc29uLnNsaWNlKDEpXG5cdHJldHVybiBqc29uXG5cdFxuXG5leHBvcnQgZGVmIGRlc2VyaWFsaXplRGF0YSBkYXRhLCByZXZpdmVyID0gbnVsbFxuXHRsZXQgb2JqZWN0cyA9IHt9XG5cdGxldCByZWcgPSAvXFwkXFwkXFxkK1xcJFxcJC9cblx0bGV0IGxvb2t1cCA9IGRvKHZhbHVlKVxuXHRcdHJldHVybiBvYmplY3RzW3ZhbHVlXSB8fD0gcmV2aXZlciA/IHJldml2ZXIodmFsdWUpIDoge31cblxuXHRsZXQgcGFyc2VyID0gZG8oa2V5LHZhbHVlKVxuXHRcdGlmIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJ1xuXHRcdFx0aWYgdmFsdWVbMF0gPT0gJyQnIGFuZCByZWcudGVzdCh2YWx1ZSlcblx0XHRcdFx0cmV0dXJuIGxvb2t1cCh2YWx1ZSlcblx0XHRlbGlmIHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgYW5kIGtleVswXSA9PSAnJCcgYW5kIHJlZy50ZXN0KGtleSlcblx0XHRcdGxldCBvYmogPSBsb29rdXAoa2V5KVxuXHRcdFx0T2JqZWN0LmFzc2lnbihvYmosdmFsdWUpXG5cdFx0XHRyZXR1cm4gb2JqXG5cblx0XHRyZXR1cm4gdmFsdWVcblxuXHRsZXQgcGFyc2VkID0gSlNPTi5wYXJzZShkYXRhLHBhcnNlcilcblx0cmV0dXJuIHBhcnNlZFxuXG5leHBvcnQgZGVmIHBhdGNoTWFuaWZlc3QgcHJldiwgY3VyclxuXHRsZXQgb3JpZ3MgPSB7fVxuXHRsZXQgZGlmZiA9IHtcblx0XHRhZGRlZDogW11cblx0XHRjaGFuZ2VkOiBbXVxuXHRcdHJlbW92ZWQ6IFtdXG5cdFx0YWxsOiBbXVxuXHRcdHVybHM6IHt9XG5cdH1cblxuXHRpZiBwcmV2LmFzc2V0c1xuXHRcdGZvciBpdGVtIGluIHByZXYuYXNzZXRzXG5cdFx0XHRsZXQgcmVmID0gaXRlbS5vcmlnaW5hbFBhdGggb3IgaXRlbS5wYXRoXG5cdFx0XHRvcmlnc1tyZWZdID0gaXRlbVxuXHRcdFx0aWYgaXRlbS51cmxcblx0XHRcdFx0IyBhZGQgb2xkIHVybHMgdG8gdGhlIG5ldyBtYW5pZmVzdFxuXHRcdFx0XHRjdXJyLnVybHNbaXRlbS51cmxdIHx8PSBpdGVtXG5cdFxuXHRmb3IgaXRlbSBpbiAoY3Vyci5hc3NldHMgb3IgW10pXG5cdFx0bGV0IHJlZiA9IGl0ZW0ub3JpZ2luYWxQYXRoIG9yIGl0ZW0ucGF0aFxuXHRcdGxldCBvcmlnID0gb3JpZ3NbcmVmXVxuXG5cdFx0aWYgaXRlbS51cmwgYW5kIHByZXYudXJsc1xuXHRcdFx0cHJldi51cmxzW2l0ZW0udXJsXSA9IGl0ZW1cblxuXHRcdGlmIG9yaWdcblx0XHRcdGlmIG9yaWcuaGFzaCAhPSBpdGVtLmhhc2hcblx0XHRcdFx0b3JpZy5pbnZhbGlkYXRlZCA9IERhdGUubm93IVxuXHRcdFx0XHRvcmlnLnJlcGxhY2VkQnkgPSBpdGVtXG5cdFx0XHRcdGl0ZW0ucmVwbGFjZXMgPSBvcmlnXG5cdFx0XHRcdGRpZmYuY2hhbmdlZC5wdXNoKGl0ZW0pXG5cdFx0XHRcdGRpZmYuYWxsLnB1c2goaXRlbSlcblxuXHRcdFx0XHRpZiBvcmlnID09IHByZXYubWFpblxuXHRcdFx0XHRcdGRpZmYubWFpbiA9IGl0ZW1cblxuXHRcdFx0ZGVsZXRlIG9yaWdzW3JlZl1cblx0XHRlbHNlXG5cdFx0XHRkaWZmLmFkZGVkLnB1c2goaXRlbSlcblx0XHRcdGRpZmYuYWxsLnB1c2goaXRlbSlcblxuXHQjIHRoZXNlIGFyZSB0aGUgaXRlbXMgdGhhdCBhcmUgbm8gbG9uZ2VyIHJlZmVyZW5jZFxuXHRmb3Igb3duIHBhdGgsaXRlbSBvZiBvcmlnc1xuXHRcdGl0ZW0ucmVtb3ZlZCA9IERhdGUubm93IVxuXHRcdGRpZmYuYWxsLnB1c2goaXRlbSlcblxuXHRmb3IgaXRlbSBpbiBkaWZmLmFsbFxuXHRcdGxldCB0eXAgPSBkaWZmW2l0ZW0udHlwZV0gfHw9IFtdXG5cdFx0dHlwLnB1c2goaXRlbSlcblxuXHRkaWZmLnJlbW92ZWQgPSBPYmplY3QudmFsdWVzKG9yaWdzKVxuXHRjdXJyLmNoYW5nZXMgPSBkaWZmXG5cdHJldHVybiBjdXJyXG5cbmV4cG9ydCBkZWYgdG9DYW1lbENhc2Ugc3RyXG5cdGlmIHN0ci5pbmRleE9mKCctJykgPj0gMFxuXHRcdHN0ci5yZXBsYWNlKGRhc2hSZWdleCkgZG8gJDEuY2hhckF0KDEpLnRvVXBwZXJDYXNlIVxuXHRlbHNlXG5cdFx0c3RyXG5cbmV4cG9ydCBkZWYgZ2V0RGVlcFByb3BlcnR5RGVzY3JpcHRvciBpdGVtLCBrZXksIHN0b3Bcblx0XG5cdGlmICFpdGVtXG5cdFx0cmV0dXJuIHVuZGVmaW5lZFxuXG5cdGxldCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdGVtLGtleSlcblxuXHRpZiBkZXNjIG9yIGl0ZW0gPT0gc3RvcFxuXHRcdHJldHVybiBkZXNjIG9yIHVuZGVmaW5lZFxuXHRcdFxuXHRnZXREZWVwUHJvcGVydHlEZXNjcmlwdG9yKFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YoaXRlbSksa2V5LHN0b3ApXG5cbiMgQmFzaWMgZXZlbnRzIC0gbW92ZSB0byBzZXBhcmF0ZSBmaWxlP1xuY29uc3QgZW1pdF9fID0gZG8oZXZlbnQsIGFyZ3MsIG5vZGUpXG5cdGxldCBwcmV2XG5cdGxldCBjYlxuXHRsZXQgcmV0XG5cblx0d2hpbGUgKHByZXYgPSBub2RlKSBhbmQgKG5vZGUgPSBub2RlLm5leHQpXG5cdFx0aWYgY2IgPSBub2RlLmxpc3RlbmVyXG5cdFx0XHRpZiBub2RlLnBhdGggYW5kIGNiW25vZGUucGF0aF1cblx0XHRcdFx0cmV0ID0gYXJncyA/IGNiW25vZGUucGF0aF0uYXBwbHkoY2IsYXJncykgOiBjYltub2RlLnBhdGhdKClcblx0XHRcdGVsc2Vcblx0XHRcdFx0IyBjaGVjayBpZiBpdCBpcyBhIG1ldGhvZD9cblx0XHRcdFx0cmV0ID0gYXJncyA/IGNiLmFwcGx5KG5vZGUsIGFyZ3MpIDogY2IuY2FsbChub2RlKVxuXG5cdFx0aWYgbm9kZS50aW1lcyAmJiAtLW5vZGUudGltZXMgPD0gMFxuXHRcdFx0cHJldi5uZXh0ID0gbm9kZS5uZXh0XG5cdFx0XHRub2RlLmxpc3RlbmVyID0gbnVsbFxuXHRyZXR1cm5cblxuIyBtZXRob2QgZm9yIHJlZ2lzdGVyaW5nIGEgbGlzdGVuZXIgb24gb2JqZWN0XG5leHBvcnQgZGVmIGxpc3RlbiBvYmosIGV2ZW50LCBsaXN0ZW5lciwgcGF0aFxuXHRsZXQgY2JzXG5cdGxldCBsaXN0XG5cdGxldCB0YWlsXG5cdGNicyA9IG9iai4jX19saXN0ZW5lcnNfXyB8fD0ge31cblx0bGlzdCA9IGNic1tldmVudF0gfHw9IHt9XG5cdHRhaWwgPSBsaXN0LnRhaWwgfHwgKGxpc3QudGFpbCA9IChsaXN0Lm5leHQgPSB7fSkpXG5cdHRhaWwubGlzdGVuZXIgPSBsaXN0ZW5lclxuXHR0YWlsLnBhdGggPSBwYXRoXG5cdGxpc3QudGFpbCA9IHRhaWwubmV4dCA9IHt9XG5cdHJldHVybiB0YWlsXG5cbiMgcmVnaXN0ZXIgYSBsaXN0ZW5lciBvbmNlXG5leHBvcnQgZGVmIG9uY2Ugb2JqLCBldmVudCwgbGlzdGVuZXJcblx0bGV0IHRhaWwgPSBsaXN0ZW4ob2JqLGV2ZW50LGxpc3RlbmVyKVxuXHR0YWlsLnRpbWVzID0gMVxuXHRyZXR1cm4gdGFpbFxuXG4jIHJlbW92ZSBhIGxpc3RlbmVyXG5leHBvcnQgZGVmIHVubGlzdGVuIG9iaiwgZXZlbnQsIGNiLCBtZXRoXG5cdGxldCBub2RlXG5cdGxldCBwcmV2XG5cdGxldCBtZXRhID0gb2JqLiNfX2xpc3RlbmVyc19fXG5cdHJldHVybiB1bmxlc3MgbWV0YVxuXG5cdGlmIG5vZGUgPSBtZXRhW2V2ZW50XVxuXHRcdHdoaWxlIChwcmV2ID0gbm9kZSkgYW5kIChub2RlID0gbm9kZS5uZXh0KVxuXHRcdFx0aWYgbm9kZSA9PSBjYiB8fCBub2RlLmxpc3RlbmVyID09IGNiXG5cdFx0XHRcdHByZXYubmV4dCA9IG5vZGUubmV4dFxuXHRcdFx0XHQjIGNoZWNrIGZvciBjb3JyZWN0IHBhdGggYXMgd2VsbD9cblx0XHRcdFx0bm9kZS5saXN0ZW5lciA9IG51bGxcblx0XHRcdFx0YnJlYWtcblx0cmV0dXJuXG5cbiMgZW1pdCBldmVudFxuZXhwb3J0IGRlZiBlbWl0IG9iaiwgZXZlbnQsIHBhcmFtc1xuXHRpZiBsZXQgY2IgPSBvYmouI19fbGlzdGVuZXJzX19cblx0XHRlbWl0X18oZXZlbnQscGFyYW1zLGNiW2V2ZW50XSkgaWYgY2JbZXZlbnRdXG5cdFx0ZW1pdF9fKGV2ZW50LFtldmVudCxwYXJhbXNdLGNiLmFsbCkgaWYgY2IuYWxsXG5cdHJldHVybiIsICJpbXBvcnQge0V2ZW50RW1pdHRlcn0gZnJvbSAnZXZlbnRzJ1xuaW1wb3J0IG5mcyBmcm9tICdmcydcbmltcG9ydCBucCBmcm9tICdwYXRoJ1xuaW1wb3J0IHtkZXNlcmlhbGl6ZURhdGEscGF0Y2hNYW5pZmVzdCxzZXJpYWxpemVEYXRhfSBmcm9tICcuL3V0aWxzJ1xuXG5jbGFzcyBBc3NldFxuXHRkZWYgY29uc3RydWN0b3IgbWFuaWZlc3Rcblx0XHQjbWFuaWZlc3QgPSBtYW5pZmVzdFxuXG5cdGdldCBhYnNQYXRoXG5cdFx0I2Fic1BhdGggfHw9ICNtYW5pZmVzdC5yZXNvbHZlKHNlbGYpXG5cdFxuXHRnZXQgbmFtZVxuXHRcdG5wLmJhc2VuYW1lKHBhdGgpXG5cblx0Z2V0IGJvZHlcblx0XHRyZWFkU3luYyFcblxuXHRkZWYgcmVhZFN5bmNcblx0XHRuZnMucmVhZEZpbGVTeW5jKGFic1BhdGgsJ3V0Zi04JylcblxuXHRkZWYgcGlwZSByZXNcblx0XHRsZXQgc3RyZWFtID0gbmZzLmNyZWF0ZVJlYWRTdHJlYW0oYWJzUGF0aClcblx0XHRyZXR1cm4gc3RyZWFtLnBpcGUocmVzKVxuXG5cdGRlZiB0b1N0cmluZ1xuXHRcdHVybCBvciBhYnNQYXRoXG5cbmV4cG9ydCBjbGFzcyBNYW5pZmVzdCA8IEV2ZW50RW1pdHRlclxuXHRkZWYgY29uc3RydWN0b3Igb3B0aW9ucyA9IHt9XG5cdFx0c3VwZXIoKVxuXHRcdG9wdGlvbnMgPSBvcHRpb25zXG5cdFx0ZGF0YSA9IHt9XG5cdFx0cGF0aCA9IG9wdGlvbnMucGF0aFxuXHRcdHJlZnMgPSB7fVxuXHRcdHJldml2ZXIgPSBkbyhrZXkpIG5ldyBBc3NldChzZWxmKVxuXHRcdGluaXQob3B0aW9ucy5kYXRhKVxuXHRcblx0Z2V0IHNyY2RpciBkbyBucC5yZXNvbHZlKG5wLmRpcm5hbWUocGF0aCksZGF0YS5zcmNkaXIpXG5cdGdldCBvdXRkaXIgZG8gbnAucmVzb2x2ZShucC5kaXJuYW1lKHBhdGgpLGRhdGEub3V0ZGlyKVxuXHRnZXQgY2hhbmdlcyBkbyBkYXRhLmNoYW5nZXMgb3Ige31cblx0Z2V0IGlucHV0cyBkbyBkYXRhLmlucHV0c1xuXHRnZXQgb3V0cHV0cyBkbyBkYXRhLm91dHB1dHNcblx0Z2V0IGFzc2V0cyBkbyBkYXRhLmFzc2V0c1xuXG5cdGdldCB1cmxzIGRvIGRhdGEudXJscyBvciB7fVxuXHRnZXQgbWFpbiBkbyBkYXRhLm1haW5cblx0Z2V0IGN3ZCBkbyBwcm9jZXNzLmN3ZCFcblxuXHRnZXQgcmF3XG5cdFx0ZGF0YS4jcmF3XG5cdFxuXHRkZWYgcmVzb2x2ZSBwYXRoXG5cdFx0aWYgcGF0aC5fID09ICdpbnB1dCdcblx0XHRcdHJldHVybiBucC5yZXNvbHZlKHNyY2RpciBvciBjd2QscGF0aC5wYXRoKVxuXHRcdGVsaWYgcGF0aC5fID09ICdvdXRwdXQnXG5cdFx0XHRyZXR1cm4gbnAucmVzb2x2ZShvdXRkaXIscGF0aC5wYXRoKVxuXHRcdGVsc2Vcblx0XHRcdHJldHVybiBucC5yZXNvbHZlKGN3ZCxwYXRoLnBhdGggb3IgcGF0aClcblx0XHRcdFxuXHRkZWYgcmVzb2x2ZUFzc2V0UGF0aCBwYXRoXG5cdFx0cmV0dXJuIG5wLnJlc29sdmUob3V0ZGlyLHBhdGgpXG5cdFxuXHRkZWYgcmVhZCBwYXRoXG5cdFx0bmZzLnJlYWRGaWxlU3luYyhyZXNvbHZlKHBhdGgpLCd1dGYtOCcpXG5cblx0ZGVmIGxvYWRGcm9tRmlsZSBwYXRoXG5cdFx0bmZzLmV4aXN0c1N5bmMocGF0aCkgPyBuZnMucmVhZEZpbGVTeW5jKHBhdGgsJ3V0Zi04JykgOiAne30nXG5cblx0ZGVmIGluaXQgZGF0YSA9IG51bGxcblx0XHRpZiBkYXRhIG9yIHBhdGhcblx0XHRcdHVwZGF0ZShkYXRhKVxuXHRcdHNlbGZcblxuXHRkZWYgdXBkYXRlIHJhdyBcblx0XHRpZiByYXcgPT0gbnVsbFxuXHRcdFx0aWYgcGF0aFxuXHRcdFx0XHRyYXcgPSBsb2FkRnJvbUZpbGUocGF0aClcblx0XHRcdGVsc2Vcblx0XHRcdFx0Y29uc29sZS53YXJuIFwiY2Fubm90IHVwZGF0ZSBtYW5pZmVzdCB3aXRob3V0IHBhdGhcIlxuXG5cdFx0aWYgdHlwZW9mIHJhdyA9PSAnc3RyaW5nJ1xuXHRcdFx0bGV0IHN0ciA9IHJhd1xuXHRcdFx0cmF3ID0gZGVzZXJpYWxpemVEYXRhKHJhdyxyZXZpdmVyKSAjIHBhc3MgaW4gdGhlIG9iamVjdHMgd2Ugd2FudCB0byB3cmFwIHRoZW0gd2l0aD9cblx0XHRcdHJhdy4jcmF3ID0gc3RyXG5cblx0XHRkYXRhID0gcGF0Y2hNYW5pZmVzdChkYXRhIG9yIHt9LHJhdylcblx0XHRcblx0XHRpZiBkYXRhLmNoYW5nZXMuYWxsLmxlbmd0aFxuXHRcdFx0ZW1pdCgnY2hhbmdlJyxkaWZmLHNlbGYpXG5cdFx0aWYgZGF0YS5jaGFuZ2VzLm1haW5cblx0XHRcdGVtaXQoJ2NoYW5nZTptYWluJyxkYXRhLm1haW4sc2VsZilcblx0XHRyZXR1cm4gZGF0YS5jaGFuZ2VzXG5cblx0ZGVmIHNlcmlhbGl6ZUZvckJyb3dzZXJcblx0XHRyZXR1cm4gZGF0YS4jcmF3XG5cblx0ZGVmICNyZWZyZXNoIGRhdGFcblx0XHR5ZXNcblxuXHRkZWYgd2F0Y2hcblx0XHRpZiAjd2F0Y2ggPT8geWVzXG5cdFx0XHQjIGRvbid0IHdhbnQgZmlsZXN5c3RlbSBpZiB3ZSBhcmUgdXNpbmcgaG1yXG5cdFx0XHRwYXRoIGFuZCAhcHJvY2Vzcy5lbnYuSU1CQV9ITVIgYW5kIG5mcy53YXRjaChwYXRoKSBkbyhldixuYW1lKVxuXHRcdFx0XHRsZXQgZXhpc3RzID0gbmZzLmV4aXN0c1N5bmMocGF0aClcblx0XHRcdFx0bGV0IHN0YXQgPSBleGlzdHMgYW5kIG5mcy5zdGF0U3luYyhwYXRoKVxuXHRcdFx0XHR1cGRhdGUhIGlmIGV4aXN0c1xuXHRcdFx0XHRyZXR1cm5cblxuXHQjIGxpc3RlbiB0byB1cGRhdGVzIGV0Y1xuXHRkZWYgb24gZXZlbnQsIGNiXG5cdFx0d2F0Y2ghXG5cdFx0c3VwZXJcblxuIyBsZXQgcGF0aCA9IHJlcXVpcmUubWFpbi5maWxlbmFtZSArICcubWFuaWZlc3QnXG4jIG5ldyBNYW5pZmVzdChwYXRoOiBwcm9jZXNzLmVudi5JTUJBX01BTklGRVNUX1BBVEggb3IgcGF0aClcbmNsYXNzIExhenlQcm94eVxuXHRzdGF0aWMgZGVmIGZvciBnZXR0ZXJcblx0XHRuZXcgUHJveHkoe30sIG5ldyBzZWxmKGdldHRlcikpXG5cblx0ZGVmIGNvbnN0cnVjdG9yIGdldHRlclxuXHRcdGdldHRlciA9IGdldHRlclxuXHRcblx0Z2V0IHRhcmdldFxuXHRcdGdldHRlciFcblxuXHRkZWYgZ2V0IF8sIGtleVxuXHRcdHRhcmdldFtrZXldXG5cdFxuXHRkZWYgc2V0IF8sIGtleSwgdmFsdWVcblx0XHR0YXJnZXRba2V5XSA9IHZhbHVlXG5cdFx0cmV0dXJuIHRydWVcblxuZXhwb3J0IGNvbnN0IG1hbmlmZXN0ID0gTGF6eVByb3h5LmZvciBkbyBnbG9iYWwuI21hbmlmZXN0IiwgIiMgaW1iYSRpbWJhUGF0aD1nbG9iYWxcbmltcG9ydCBjbHVzdGVyIGZyb20gJ2NsdXN0ZXInXG5pbXBvcnQgbmZzIGZyb20gJ2ZzJ1xuaW1wb3J0IG5wIGZyb20gJ3BhdGgnXG5pbXBvcnQge0V2ZW50RW1pdHRlcn0gZnJvbSAnZXZlbnRzJ1xuaW1wb3J0IHttYW5pZmVzdH0gZnJvbSAnLi9tYW5pZmVzdCdcbiMgaW1wb3J0IHtEb2N1bWVudCxMb2NhdGlvbn0gZnJvbSAnLi9kb20vY29yZSdcbmltcG9ydCBsb2cgZnJvbSAnLi4vdXRpbHMvbG9nZ2VyJ1xuXG5pbXBvcnQge01vZHVsZX0gZnJvbSAnbW9kdWxlJ1xuaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCdcbmltcG9ydCBodHRwcyBmcm9tICdodHRwcydcbmltcG9ydCB7SHR0cDJTZXJ2ZXJSZXF1ZXN0fSBmcm9tICdodHRwMidcblxuIyBUT0RPIHNoYXJlIG1pbWVUeXBlIGxpc3Qgd2l0aCBidW5kbGVyIHRvXG4jIGJ1bmRsZSBzdXBwb3J0ZWQgZmlsZSBleHRlbnNpb25zXG5jb25zdCBkZWZhdWx0SGVhZGVycyA9IHtcblx0aHRtbDogeydDb250ZW50LVR5cGUnOiAndGV4dC9odG1sJ31cblx0anM6IHsnQ29udGVudC1UeXBlJzogJ3RleHQvamF2YXNjcmlwdCd9XG5cdG1qczogeydDb250ZW50LVR5cGUnOiAndGV4dC9qYXZhc2NyaXB0J31cblx0anNvbjogeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9XG5cdGNzczogeydDb250ZW50LVR5cGUnOiAndGV4dC9jc3MnfVxuXHRcdFxuXHRvdGY6IHsnQ29udGVudC1UeXBlJzogJ2ZvbnQvb3RmJ31cblx0dHRmOiB7J0NvbnRlbnQtVHlwZSc6ICdmb250L3R0Zid9XG5cdHdvZmY6IHsnQ29udGVudC1UeXBlJzogJ2ZvbnQvd29mZid9XG5cdHdvZmYyOiB7J0NvbnRlbnQtVHlwZSc6ICdmb250L3dvZmYyJ31cblx0XG5cdHN2ZzogeydDb250ZW50LVR5cGUnOiAnaW1hZ2Uvc3ZnK3htbCd9XG5cdGF2aWY6IHsnQ29udGVudC1UeXBlJzogJ2ltYWdlL2F2aWYnfVxuXHRnaWY6IHsnQ29udGVudC1UeXBlJzogJ2ltYWdlL2dpZid9XG5cdHBuZzogeydDb250ZW50LVR5cGUnOiAnaW1hZ2UvcG5nJ31cblx0YXBuZzogeydDb250ZW50LVR5cGUnOiAnaW1hZ2UvYXBuZyd9XHRcblx0d2VicDogeydDb250ZW50LVR5cGUnOiAnaW1hZ2Uvd2VicCd9XG5cdGpwZzogeydDb250ZW50LVR5cGUnOiAnaW1hZ2UvanBlZyd9XG5cdGpwZWc6IHsnQ29udGVudC1UeXBlJzogJ2ltYWdlL2pwZWcnfVxuXHRibXA6IHsnQ29udGVudC1UeXBlJzogJ2ltYWdlL2JtcCd9XG5cdFxuXHR3ZWJtOiB7J0NvbnRlbnQtVHlwZSc6ICd2aWRlby93ZWJtJ31cblx0d2ViYTogeydDb250ZW50LVR5cGUnOiAnYXVkaW8vd2VibSd9XG5cdGF2aTogeydDb250ZW50LVR5cGUnOiAndmlkZW8veC1tc3ZpZGVvJ31cblx0bXAzOiB7J0NvbnRlbnQtVHlwZSc6ICdhdWRpby9tcGVnJ31cblx0bXA0OiB7J0NvbnRlbnQtVHlwZSc6ICd2aWRlby9tcDQnfVxuXHRtNGE6IHsnQ29udGVudC1UeXBlJzogJ2F1ZGlvL200YSd9XG5cdG1wZWc6IHsnQ29udGVudC1UeXBlJzogJ3ZpZGVvL21wZWcnfVxuXHR3YXY6IHsnQ29udGVudC1UeXBlJzogJ2F1ZGlvL3dhdid9XG5cdG9nZzogeydDb250ZW50LVR5cGUnOiAnYXVkaW8vb2dnJ31cblx0b2d2OiB7J0NvbnRlbnQtVHlwZSc6ICd2aWRlby9vZ2cnfVxuXHRvZ2E6IHsnQ29udGVudC1UeXBlJzogJ2F1ZGlvL29nZyd9XG5cdG9wdXM6IHsnQ29udGVudC1UeXBlJzogJ2F1ZGlvL29wdXMnfVxuXHRcbn1cblxuY29uc3QgcHJvYyA9IGdsb2JhbC5wcm9jZXNzXG5cbmNsYXNzIFNlcnZlcnMgPCBTZXRcblxuXHRkZWYgY2FsbCBuYW1lLC4uLnBhcmFtc1xuXHRcdGZvciBzZXJ2ZXIgb2Ygc2VsZlxuXHRcdFx0c2VydmVyW25hbWVdKC4uLnBhcmFtcylcblxuXHRkZWYgY2xvc2UgbyA9IHt9XHRcblx0XHRmb3Igc2VydmVyIG9mIHNlbGZcblx0XHRcdHNlcnZlci5jbG9zZShvKVxuXG5cdGRlZiByZWxvYWQgbyA9IHt9XHRcblx0XHRmb3Igc2VydmVyIG9mIHNlbGZcblx0XHRcdHNlcnZlci5yZWxvYWQobylcblx0XG5cdGRlZiBicm9hZGNhc3QgbXNnLCAuLi5yZXN0XG5cdFx0Zm9yIHNlcnZlciBvZiBzZWxmXG5cdFx0XHRzZXJ2ZXIuYnJvYWRjYXN0KG1zZywuLi5yZXN0KVxuXG5cdGRlZiBlbWl0IGV2ZW50LCBkYXRhXG5cdFx0Zm9yIHNlcnZlciBvZiBzZWxmXG5cdFx0XHRzZXJ2ZXIuZW1pdChldmVudCxkYXRhKVxuXG5leHBvcnQgY29uc3Qgc2VydmVycyA9IG5ldyBTZXJ2ZXJzXG5cbmV4cG9ydCBjb25zdCBwcm9jZXNzID0gbmV3IGNsYXNzIFByb2Nlc3MgPCBFdmVudEVtaXR0ZXJcblxuXHRkZWYgY29uc3RydWN0b3Jcblx0XHRzdXBlclxuXHRcdGF1dG9yZWxvYWQgPSBub1xuXHRcdHN0YXRlID0ge30gIyBwcm94eSBmb3IgbGlzdGVuaW5nP1xuXHRcdCMgcHJvY2VzcyBpcyBcblx0XHRpZiBjbHVzdGVyLmlzV29ya2VyXG5cdFx0XHQjIGNvbnNvbGUubG9nICdjcmVhdGVkIGZvciB3b3JrZXIhISEnXG5cdFx0XHQjIGRvZXMgdGhpcyBtYWtlIHVzIHVuYWJsZSB0byBhdXRvbWF0aWNhbGx5IHN0b3AgYSBwcm9jZXNzP1xuXHRcdFx0cHJvYy5vbignbWVzc2FnZScpIGRvKG1zZylcblx0XHRcdFx0ZW1pdCgnbWVzc2FnZScsbXNnKVxuXHRcdFx0XHRlbWl0KC4uLm1zZy5zbGljZSgxKSkgaWYgbXNnWzBdID09ICdlbWl0J1xuXHRcdFx0XHQjIHJlbG9hZCEgaWYgbXNnID09ICdyZWxvYWQnXG5cdFx0c2VsZlxuXG5cdGRlZiAjc2V0dXBcblx0XHRyZXR1cm4gdW5sZXNzICNzZXR1cD8gPT8geWVzXG5cblx0XHRvbigncmVsb2FkaW5nJykgZG8oZSlcblx0XHRcdGNvbnNvbGUubG9nICdpcyByZWxvYWRpbmcgLSBmcm9tIG91dHNpZGUnXG5cdFx0XHRzdGF0ZS5yZWxvYWRpbmcgPSB5ZXNcblx0XHRcdGZvciBzZXJ2ZXIgb2Ygc2VydmVyc1xuXHRcdFx0XHRzZXJ2ZXIucGF1c2UhXG5cblx0XHRvbigncmVsb2FkZWQnKSBkbyhlKVxuXHRcdFx0c3RhdGUucmVsb2FkZWQgPSB5ZXNcblx0XHRcdGNvbnNvbGUubG9nICdpcyByZWxvYWRlZCAtIGZyb20gb3V0c2lkZSdcblxuXHRcdFx0bGV0IHByb21pc2VzID0gZm9yIHNlcnZlciBvZiBzZXJ2ZXJzXG5cdFx0XHRcdHNlcnZlci5jbG9zZSFcblx0XHRcdFxuXHRcdFx0c2V0VGltZW91dCgmLDEwMCkgZG8gcHJvYy5leGl0KDApXG5cdFx0XHRhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcylcblx0XHRcdCMgY29uc29sZS5sb2cgJ2FjdHVhbGx5IGNsb3NlZCEhJ1xuXHRcdFx0cHJvYy5leGl0KDApXG5cblx0XHRvbignbWFuaWZlc3Q6Y2hhbmdlJykgZG8oZSlcblx0XHRcdGlmIHByb2MuZW52LklNQkFfSE1SXG5cdFx0XHRcdCMgY29uc29sZS5sb2cgJ21hbmlmZXN0IGNoYW5nZWQgZnJvbSBtYXN0ZXInXG5cdFx0XHRcdG1hbmlmZXN0LnVwZGF0ZShlKVxuXHRcdFxuXHRcdG9uKCdtYW5pZmVzdDplcnJvcicpIGRvKGUpXG5cdFx0XHRpZiBwcm9jLmVudi5JTUJBX0hNUlxuXHRcdFx0XHRtYW5pZmVzdC5lcnJvcnMgPSBlXG5cdFx0XHRcdHNlcnZlcnMuYnJvYWRjYXN0KCdlcnJvcnMnLG1hbmlmZXN0LmVycm9ycylcblx0XHR5ZXNcblxuXHRkZWYgc2VuZCBtc2dcblx0XHRpZiBwcm9jLnNlbmQgaXNhIEZ1bmN0aW9uXG5cdFx0XHRwcm9jLnNlbmQobXNnKVxuXG5cdGRlZiBvbiBuYW1lLCBjYlxuXHRcdHdhdGNoISBpZiBuYW1lID09ICdjaGFuZ2UnXG5cdFx0c3VwZXJcblxuXHRkZWYgd2F0Y2hcblx0XHRpZiAjd2F0Y2ggPT8geWVzXG5cdFx0XHRtYW5pZmVzdC5vbignY2hhbmdlOm1haW4nKSBkb1xuXHRcdFx0XHRlbWl0KCdjaGFuZ2UnLG1hbmlmZXN0KVxuXG5cdGRlZiByZWxvYWRcblx0XHQjIG9ubHkgYWxsb3cgcmVsb2FkaW5nIG9uY2Vcblx0XHRyZXR1cm4gc2VsZiB1bmxlc3MgaXNSZWxvYWRpbmcgPT8geWVzXG5cdFx0c3RhdGUucmVsb2FkaW5nID0geWVzXG5cblx0XHR1bmxlc3MgcHJvYy5lbnYuSU1CQV9TRVJWRVxuXHRcdFx0Y29uc29sZS53YXJuIFwibm90IHBvc3NpYmxlIHRvIGdyYWNlZnVsbHkgcmVsb2FkIHNlcnZlcnMgbm90IHN0YXJ0ZWQgdmlhIGltYmEgc3RhcnRcIlxuXHRcdFx0cmV0dXJuXG5cblx0XHRzZW5kKCdyZWxvYWQnKVxuXHRcdHJldHVyblxuXG5cdFx0IyBzdGFsbCBhbGwgY3VycmVudCBzZXJ2ZXJzXG5cdFx0Zm9yIHNlcnZlciBvZiBzZXJ2ZXJzXG5cdFx0XHRzZXJ2ZXIucGF1c2UhXG5cdFxuXHRcdG9uKCdyZWxvYWRlZCcpIGRvKGUpXG5cdFx0XHQjIGNvbnNvbGUubG9nICdjbG9zaW5nIHNlcnZlcnMnXG5cdFx0XHRsZXQgcHJvbWlzZXMgPSBmb3Igc2VydmVyIG9mIHNlcnZlcnNcblx0XHRcdFx0c2VydmVyLmNsb3NlIVxuXHRcdFx0YXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG5cdFx0XHQjIGNvbnNvbGUubG9nICdhY3R1YWxseSBjbG9zZWQhISdcblx0XHRcdHByb2MuZXhpdCgwKVxuXG5cdFx0c2VuZCgncmVsb2FkJylcblxuXG5jbGFzcyBBc3NldFJlc3BvbmRlclxuXHRkZWYgY29uc3RydWN0b3IgdXJsLCBwYXJhbXMgPSB7fVxuXHRcdHVybCA9IHVybFxuXHRcdFtwYXRoLHF1ZXJ5XSA9IHVybC5zcGxpdCgnPycpXG5cdFx0ZXh0ID0gbnAuZXh0bmFtZShwYXRoKVxuXG5cdFx0aGVhZGVycyA9IHtcblx0XHRcdCdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbidcblx0XHRcdCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKidcblx0XHRcdCdjYWNoZS1jb250cm9sJzogJ3B1YmxpYydcblx0XHR9XG5cdFx0T2JqZWN0LmFzc2lnbihoZWFkZXJzLGRlZmF1bHRIZWFkZXJzW2V4dC5zbGljZSgxKV0gb3Ige30pXG5cblx0ZGVmIHJlc3BvbmQgcmVxLCByZXNcblx0XHRsZXQgYXNzZXQgPSBtYW5pZmVzdC51cmxzW3VybF1cblx0XHRsZXQgaGVhZGVycyA9IGhlYWRlcnNcblx0XHRsZXQgcGF0aCA9IGFzc2V0ID8gbWFuaWZlc3QucmVzb2x2ZShhc3NldCkgOiBtYW5pZmVzdC5yZXNvbHZlQXNzZXRQYXRoKCdwdWJsaWMnICsgc2VsZi5wYXRoKVxuXG5cdFx0IyAgbnAucmVzb2x2ZShwcm9jLmN3ZCEsYXNzZXQucGF0aClcblx0XHR1bmxlc3MgcGF0aFxuXHRcdFx0Y29uc29sZS5sb2cgJ2ZvdW5kIG5vIHBhdGggZm9yJyxhc3NldCx1cmxcblx0XHRcdHJlcy53cml0ZUhlYWQoNDA0LCB7fSlcblx0XHRcdHJldHVybiByZXMuZW5kIVxuXG5cdFx0aWYgYXNzZXQgXG5cdFx0XHRpZiBhc3NldC50dGwgPiAwXG5cdFx0XHRcdGhlYWRlcnNbJ2NhY2hlLWNvbnRyb2wnXSA9IFwibWF4LWFnZT17YXNzZXQudHRsfVwiXG5cdFx0XG5cdFx0XHRpZiBhc3NldC5pbXBvcnRzXG5cdFx0XHRcdGxldCBsaW5rID0gW11cblx0XHRcdFx0Zm9yIGl0ZW0gaW4gYXNzZXQuaW1wb3J0c1xuXHRcdFx0XHRcdGxpbmsucHVzaChcIjx7aXRlbS51cmx9PjsgcmVsPW1vZHVsZXByZWxvYWQ7IGFzPXNjcmlwdFwiKVxuXHRcdFx0XHRoZWFkZXJzWydMaW5rJ10gPSBsaW5rLmpvaW4oJywgJylcblx0XHQjIGluY2x1ZGUgXG5cdFx0XG5cdFx0bmZzLmFjY2VzcyhwYXRoLG5mcy5jb25zdGFudHMuUl9PSykgZG8oZXJyKVxuXHRcdFx0aWYgZXJyXG5cdFx0XHRcdGNvbnNvbGUubG9nICdjb3VsZCBub3QgZmluZCBwYXRoJyxwYXRoXG5cdFx0XHRcdHJlcy53cml0ZUhlYWQoNDA0LHt9KVxuXHRcdFx0XHRyZXR1cm4gcmVzLmVuZCFcblx0XHRcdFxuXHRcdFx0dHJ5XG5cdFx0XHRcdGxldCBzdHJlYW0gPSBuZnMuY3JlYXRlUmVhZFN0cmVhbShwYXRoKVxuXHRcdFx0XHRyZXMud3JpdGVIZWFkKDIwMCwgaGVhZGVycylcblx0XHRcdFx0cmV0dXJuIHN0cmVhbS5waXBlKHJlcylcblx0XHRcdGNhdGNoIGVcblx0XHRcdFx0cmVzLndyaXRlSGVhZCg1MDMse30pXG5cdFx0XHRcdHJldHVybiByZXMuZW5kIVxuXG5cdGRlZiBjcmVhdGVSZWFkU3RyZWFtXG5cdFx0bmZzLmNyZWF0ZVJlYWRTdHJlYW0ocGF0aClcblxuXHRkZWYgcGlwZSByZXNwb25zZVxuXHRcdGNyZWF0ZVJlYWRTdHJlYW0hLnBpcGUocmVzcG9uc2UpXG5cbmNsYXNzIFNlcnZlclxuXG5cdHN0YXRpYyBkZWYgd3JhcCBzZXJ2ZXIsIG8gPSB7fVxuXHRcdG5ldyBzZWxmKHNlcnZlcixvKVxuXG5cdGRlZiBjb25zdHJ1Y3RvciBzcnYsb3B0aW9uc1xuXHRcdHNlcnZlcnMuYWRkKHNlbGYpXG5cdFx0aWQgPSBNYXRoLnJhbmRvbSFcblx0XHRvcHRpb25zID0gb3B0aW9uc1xuXHRcdGNsb3NlZCA9IG5vXG5cdFx0cGF1c2VkID0gbm9cblx0XHRzZXJ2ZXIgPSBzcnZcblx0XHRjbGllbnRzID0gbmV3IFNldFxuXHRcdHN0YWxsZWRSZXNwb25zZXMgPSBbXVxuXHRcdGFzc2V0UmVzcG9uZGVycyA9IHt9XG5cdFx0XG5cdFx0aWYgcHJvYy5lbnYuSU1CQV9QQVRIXG5cdFx0XHRkZXZ0b29sc1BhdGggPSBucC5yZXNvbHZlKHByb2MuZW52LklNQkFfUEFUSCwnZGlzdCcsJ2htci5qcycpXG5cblx0XHRzY2hlbWUgPSBzcnYgaXNhIGh0dHAuU2VydmVyID8gJ2h0dHAnIDogJ2h0dHBzJ1xuXG5cdFx0IyBmZXRjaCBhbmQgcmVtb3ZlIHRoZSBvcmlnaW5hbCByZXF1ZXN0IGxpc3RlbmVyXG5cdFx0bGV0IG9yaWdpbmFsSGFuZGxlciA9IHNlcnZlci5fZXZlbnRzLnJlcXVlc3Rcblx0XHRsZXQgZG9tID0gZ2xvYmFsLiNkb21cblx0XHRzcnYub2ZmKCdyZXF1ZXN0JyxvcmlnaW5hbEhhbmRsZXIpXG5cblx0XHQjIGNoZWNrIGlmIHRoaXMgaXMgYW4gZXhwcmVzcyBhcHA/XG5cdFx0b3JpZ2luYWxIYW5kbGVyLiNzZXJ2ZXIgPSBzZWxmXG5cblx0XHRzcnYub24oJ2xpc3RlbmluZycpIGRvXG5cdFx0XHQjIGlmIG5vdCBzaWxlbnQ/XG5cdFx0XHRsZXQgYWRyID0gc2VydmVyLmFkZHJlc3MhXG5cdFx0XHRsZXQgaG9zdCA9IGFkci5hZGRyZXNzXG5cdFx0XHRpZiBob3N0ID09ICc6Oicgb3IgaG9zdCA9PSAnMC4wLjAuMCdcblx0XHRcdFx0aG9zdCA9ICdsb2NhbGhvc3QnXG5cdFx0XHRsZXQgdXJsID0gXCJ7c2NoZW1lfTovL3tob3N0fTp7YWRyLnBvcnR9L1wiXG5cdFx0XHRsb2cuaW5mbyAnbGlzdGVuaW5nIG9uICVib2xkJyx1cmxcblx0XHRcdCMgTG9nZ2VyLm1haW4ud2FybiAnbGlzdGVuaW5nIG9uICVib2xkJyx1cmxcblxuXHRcdCMgaWYgd2UgYXJlIGluIGRldi1tb2RlLCBicm9hZGNhc3QgdXBkYXRlZCBtYW5pZmVzdCB0byB0aGUgY2xpZW50c1xuXHRcdFxuXHRcdG1hbmlmZXN0Lm9uKCdjaGFuZ2UnKSBkbyhjaGFuZ2VzLG0pXG5cdFx0XHRicm9hZGNhc3QoJ21hbmlmZXN0JyxtLmRhdGEuI3Jhdylcblx0XHRcblx0XHRoYW5kbGVyID0gZG8ocmVxLHJlcylcblx0XHRcdGxldCBpc2h0dHAyID0gcmVxIGlzYSBIdHRwMlNlcnZlclJlcXVlc3Rcblx0XHRcdGxldCB1cmwgPSByZXEudXJsXG5cdFx0XHRsZXQgYXNzZXRQcmVmaXggPSAnL19fYXNzZXRzX18vJ1xuXG5cdFx0XHRpZiBwYXVzZWQgb3IgY2xvc2VkXG5cdFx0XHRcdHJlcy5zdGF0dXNDb2RlPTMwMlxuXHRcdFx0XHRyZXMuc2V0SGVhZGVyKCdMb2NhdGlvbicscmVxLnVybClcblxuXHRcdFx0XHR1bmxlc3MgaXNodHRwMlxuXHRcdFx0XHRcdHJlcy5zZXRIZWFkZXIoJ0Nvbm5lY3Rpb24nLCdjbG9zZScpXG5cblx0XHRcdFx0aWYgY2xvc2VkXG5cdFx0XHRcdFx0aWYgaXNodHRwMlxuXHRcdFx0XHRcdFx0cmVxLnN0cmVhbS5zZXNzaW9uLmNsb3NlIVxuXHRcdFx0XHRcdHJldHVybiByZXMuZW5kIVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0cmV0dXJuIHN0YWxsZWRSZXNwb25zZXMucHVzaChyZXMpXG5cblx0XHRcdGlmIHVybCA9PSAnL19faG1yX18uanMnIGFuZCBkZXZ0b29sc1BhdGhcblx0XHRcdFx0IyBhbmQgaWYgaG1yP1xuXHRcdFx0XHRsZXQgc3RyZWFtID0gbmZzLmNyZWF0ZVJlYWRTdHJlYW0oZGV2dG9vbHNQYXRoKVxuXHRcdFx0XHRyZXMud3JpdGVIZWFkKDIwMCwgZGVmYXVsdEhlYWRlcnMuanMpXG5cdFx0XHRcdHJldHVybiBzdHJlYW0ucGlwZShyZXMpXG5cdFx0XHRcblx0XHRcdGlmIHVybCA9PSAnL19faG1yX18nXG5cdFx0XHRcdGxldCBoZWFkZXJzID0ge1xuXHRcdFx0XHRcdCdDb250ZW50LVR5cGUnOiAndGV4dC9ldmVudC1zdHJlYW0nXG5cdFx0XHRcdFx0J0NhY2hlLUNvbnRyb2wnOiAnbm8tY2FjaGUnXG5cdFx0XHRcdH1cblx0XHRcdFx0dW5sZXNzIGlzaHR0cDJcblx0XHRcdFx0XHRoZWFkZXJzWydDb25uZWN0aW9uJ10gPSAna2VlcC1hbGl2ZSdcblxuXHRcdFx0XHRyZXMud3JpdGVIZWFkKDIwMCxoZWFkZXJzKVxuXHRcdFx0XHRjbGllbnRzLmFkZChyZXMpXG5cdFx0XHRcdGJyb2FkY2FzdCgnaW5pdCcsbWFuaWZlc3Quc2VyaWFsaXplRm9yQnJvd3NlciEsW3Jlc10pXG5cdFx0XHRcdHJlcS5vbignY2xvc2UnKSBkbyBjbGllbnRzLmRlbGV0ZShyZXMpXG5cdFx0XHRcdHJldHVybiB0cnVlXG5cdFx0XHRcblx0XHRcdCMgZm91bmQgYSBoaXQgZm9yIHRoZSB1cmw/XG5cdFx0XHRpZiB1cmwuaW5kZXhPZihhc3NldFByZWZpeCkgPT0gMCBvciBtYW5pZmVzdC51cmxzW3VybF1cblx0XHRcdFx0IyBsZXQgYXNzZXQgPSBtYW5pZmVzdC51cmxzW3VybF1cblx0XHRcdFx0bGV0IHJlc3BvbmRlciA9IGFzc2V0UmVzcG9uZGVyc1t1cmxdIHx8PSBuZXcgQXNzZXRSZXNwb25kZXIodXJsLHNlbGYpXG5cdFx0XHRcdHJldHVybiByZXNwb25kZXIucmVzcG9uZChyZXEscmVzKVxuXG5cdFx0XHQjIGNyZWF0ZSBmdWxsIHVybFxuXHRcdFx0bGV0IGhlYWRlcnMgPSByZXEuaGVhZGVyc1xuXHRcdFx0bGV0IGJhc2Vcblx0XHRcdGlmIGlzaHR0cDJcblx0XHRcdFx0YmFzZSA9IGhlYWRlcnNbJzpzY2hlbWUnXSArICc6Ly8nICsgaGVhZGVyc1snOmF1dGhvcml0eSddXG5cdFx0XHRlbHNlXG5cdFx0XHRcdGxldCBzY2hlbWUgPSByZXEuY29ubmVjdGlvbi5lbmNyeXB0ZWQgPyAnaHR0cHMnIDogJ2h0dHAnXG5cdFx0XHRcdGJhc2UgPSBzY2hlbWUgKyAnOi8vJyArIGhlYWRlcnMuaG9zdFxuXG5cdFx0XHQjIGNvbnNvbGUubG9nIFwiZ2V0IGhlYWRlcnNcIixiYXNlLHJlcS51cmwsaGVhZGVycyxyZXEucHJvdG9jb2xcblx0XHRcdFxuXHRcdFx0IyBpZiB3ZSd2ZSBlbmFibGVkIHNlcnZpbmcgc3RhdGljIGFzc2V0c1xuXHRcdFx0aWYgb3B0aW9ucy5zdGF0aWNcblx0XHRcdFx0IyBieXBhc3MgZm9yIHRoZSBtb3N0IGJhc2ljIHN0ZmZcblx0XHRcdFx0bGV0IHJ1cmwgPSBuZXcgVVJMKHVybCxiYXNlKVxuXHRcdFx0XHRsZXQgZXh0ID0gbnAuZXh0bmFtZShydXJsLnBhdGhuYW1lKVxuXHRcdFx0XHRsZXQgaGVhZGVycyA9IGRlZmF1bHRIZWFkZXJzW2V4dC5zbGljZSgxKV1cblx0XHRcdFx0aWYgaGVhZGVyc1xuXHRcdFx0XHRcdGxldCBwYXRoID0gbnAucmVzb2x2ZShtYW5pZmVzdC5jd2QsXCIue3J1cmwucGF0aG5hbWV9XCIpXG5cdFx0XHRcdFx0bGV0IGV4aXN0cyA9IG5mcy5leGlzdHNTeW5jKHBhdGgpXG5cdFx0XHRcdFx0IyBjb25zb2xlLmxvZyBcImNoZWNrIGZvciBmaWxlIVwiLHVybCxtYW5pZmVzdC5jd2QscGF0aCxydXJsLGV4aXN0c1xuXHRcdFx0XHRcdGlmIGV4aXN0c1xuXHRcdFx0XHRcdFx0bmZzLnJlYWRGaWxlKHBhdGgpIGRvKGVycixkYXRhKVxuXHRcdFx0XHRcdFx0XHRpZiBlcnJcblx0XHRcdFx0XHRcdFx0XHRyZXMud3JpdGVIZWFkKDUwMCx7fSlcblx0XHRcdFx0XHRcdFx0XHRyZXMud3JpdGUoXCJFcnJvciBnZXR0aW5nIHRoZSBmaWxlOiB7ZXJyfVwiKVxuXHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0cmVzLndyaXRlSGVhZCgyMDAsaGVhZGVycylcblx0XHRcdFx0XHRcdFx0XHRyZXMuZW5kKGRhdGEpXG5cdFx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFxuXHRcdFx0aWYgZG9tXG5cdFx0XHRcdGxldCBsb2MgPSBuZXcgZG9tLkxvY2F0aW9uKHJlcS51cmwsYmFzZSlcblx0XHRcdFx0IyBjcmVhdGUgYSBjb250ZXh0IC0gbm90IGEgZG9jdW1lbnQ/XG5cdFx0XHRcdGRvbS5Eb2N1bWVudC5jcmVhdGUobG9jYXRpb246IGxvYykgZG9cblx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxIYW5kbGVyKHJlcSxyZXMpXG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiBvcmlnaW5hbEhhbmRsZXIocmVxLHJlcylcblxuXHRcdHNydi5vbigncmVxdWVzdCcsaGFuZGxlcilcblxuXHRcdHNydi5vbignY2xvc2UnKSBkb1xuXHRcdFx0Y29uc29sZS5sb2cgXCJzZXJ2ZXIgaXMgY2xvc2luZyEhIVwiXG5cblx0XHRpZiBjbHVzdGVyLmlzV29ya2VyXG5cdFx0XHRwcm9jZXNzLiNzZXR1cCFcblx0XHRcdHByb2Nlc3Muc2VuZCgnc2VydmUnKVxuXG5cdGRlZiBicm9hZGNhc3QgZXZlbnQsIGRhdGEgPSB7fSwgY2xpZW50cyA9IGNsaWVudHNcblx0XHRkYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSlcblx0XHRsZXQgbXNnID0gXCJkYXRhOiB7ZGF0YX1cXG5cXG5cXG5cIlxuXHRcdGZvciBjbGllbnQgb2YgY2xpZW50c1xuXHRcdFx0Y2xpZW50LndyaXRlKFwiZXZlbnQ6IHtldmVudH1cXG5cIilcblx0XHRcdGNsaWVudC53cml0ZShcImlkOiBpbWJhXFxuXCIpXG5cdFx0XHRjbGllbnQud3JpdGUobXNnKVxuXHRcdHJldHVybiBzZWxmXG5cblx0ZGVmIHBhdXNlXG5cdFx0aWYgcGF1c2VkID0/IHllc1xuXHRcdFx0YnJvYWRjYXN0KCdwYXVzZWQnKVxuXHRcdFx0IyBjb25zb2xlLmxvZyAncGF1c2VkIHNlcnZlcidcblx0XHRzZWxmXG5cblx0ZGVmIHJlc3VtZVxuXHRcdGlmIHBhdXNlZCA9PyBub1xuXHRcdFx0IyBjb25zb2xlLmxvZyAncmVzdW1lZCBzZXJ2ZXInXG5cdFx0XHRicm9hZGNhc3QoJ3Jlc3VtZWQnKVxuXHRcdFx0Zmx1c2hTdGFsbGVkUmVzcG9uc2VzIVxuXG5cdGRlZiBmbHVzaFN0YWxsZWRSZXNwb25zZXNcblx0XHRmb3IgcmVzIGluIHN0YWxsZWRSZXNwb25zZXNcblx0XHRcdHJlcy5lbmQhXG5cdFx0c3RhbGxlZFJlc3BvbnNlcyA9IFtdXG5cdFxuXHRkZWYgY2xvc2Vcblx0XHRwYXVzZSFcblxuXHRcdG5ldyBQcm9taXNlIGRvKHJlc29sdmUpXG5cdFx0XHRjbG9zZWQgPSB5ZXNcblx0XHRcdHNlcnZlci5jbG9zZShyZXNvbHZlKVxuXHRcdFx0Zmx1c2hTdGFsbGVkUmVzcG9uc2VzIVxuXG5leHBvcnQgZGVmIHNlcnZlIHNydiwuLi5wYXJhbXNcblx0cmV0dXJuIFNlcnZlci53cmFwKHNydiwuLi5wYXJhbXMpXG5cbmV4cG9ydCBkZWYgX2ZpbGVuYW1lXyBwYXRoXG5cdG5wLnJlc29sdmUocHJvYy5jd2QhLHBhdGgpXG5cbmV4cG9ydCBkZWYgX2Rpcm5hbWVfIHBhdGhcblx0bnAuZGlybmFtZShfZmlsZW5hbWVfKHBhdGgpKVxuXG5leHBvcnQgZGVmIF9ydW5fIG1vZHVsZSwgZmlsZVxuXHR0cnlcblx0XHRsZXQgc3JjZGlyID0gbWFuaWZlc3Quc3JjZGlyXG5cdFx0bGV0IHNyYyA9IHNyY2RpciArICcvc2VydmVyLmltYmEnXG5cdFx0bGV0IHBhdGhzID0gcmVxdWlyZS5yZXNvbHZlLnBhdGhzKHNyY2RpciArICcvc2VydmVyLmltYmEnKVxuXHRcdHJlcXVpcmUubWFpbi5wYXRocy51bnNoaWZ0KC4uLk1vZHVsZS5fbm9kZU1vZHVsZVBhdGhzKG1hbmlmZXN0LnNyY2RpcikpIiwgImltcG9ydCB7cGVyZm9ybWFuY2V9IGZyb20gJ3BlcmZfaG9va3MnXG5cbmNvbnN0IGFuc2lNYXAgPVxuXHRyZXNldDogWzAsIDBdLFxuXHRib2xkOiBbMSwgMjJdLFxuXHRkaW06IFsyLCAyMl0sXG5cdGl0YWxpYzogWzMsIDIzXSxcblx0dW5kZXJsaW5lOiBbNCwgMjRdLFxuXHRpbnZlcnNlOiBbNywgMjddLFxuXHRoaWRkZW46IFs4LCAyOF0sXG5cdHN0cmlrZXRocm91Z2g6IFs5LCAyOV1cblx0XG5cdGJsYWNrOiBbMzAsIDM5XSxcblx0cmVkOiBbMzEsIDM5XSxcblx0Z3JlZW46IFszMiwgMzldLFxuXHR5ZWxsb3c6IFszMywgMzldLFxuXHRibHVlOiBbMzQsIDM5XSxcblx0bWFnZW50YTogWzM1LCAzOV0sXG5cdGN5YW46IFszNiwgMzldLFxuXHR3aGl0ZTogWzM3LCAzOV0sXG5cdGdyYXk6IFs5MCwgMzldLFxuXHRcblx0cmVkQnJpZ2h0OiBbOTEsIDM5XSxcblx0Z3JlZW5CcmlnaHQ6IFs5MiwgMzldLFxuXHR5ZWxsb3dCcmlnaHQ6IFs5MywgMzldLFxuXHRibHVlQnJpZ2h0OiBbOTQsIDM5XSxcblx0bWFnZW50YUJyaWdodDogWzk1LCAzOV0sXG5cdGN5YW5CcmlnaHQ6IFs5NiwgMzldLFxuXHR3aGl0ZUJyaWdodDogWzk3LCAzOV1cblxuY29uc3QgYW5zaSA9XG5cdGJvbGQ6IGRvKHRleHQpICdcXHUwMDFiWzFtJyArIHRleHQgKyAnXFx1MDAxYlsyMm0nXG5cdHJlZDogZG8odGV4dCkgJ1xcdTAwMWJbMzFtJyArIHRleHQgKyAnXFx1MDAxYlszOW0nXG5cdGdyZWVuOiBkbyh0ZXh0KSAnXFx1MDAxYlszMm0nICsgdGV4dCArICdcXHUwMDFiWzM5bSdcblx0eWVsbG93OiBkbyh0ZXh0KSAnXFx1MDAxYlszM20nICsgdGV4dCArICdcXHUwMDFiWzM5bSdcblx0Ymx1ZTogZG8odGV4dCkgJ1xcdTAwMWJbOTRtJyArIHRleHQgKyAnXFx1MDAxYlszOW0nXG5cdGdyYXk6IGRvKHRleHQpICdcXHUwMDFiWzkwbScgKyB0ZXh0ICsgJ1xcdTAwMWJbMzltJ1xuXHR3aGl0ZTogZG8odGV4dCkgJ1xcdTAwMWJbMzdtJyArIHRleHQgKyAnXFx1MDAxYlszOW0nXG5cdGY6IGRvKG5hbWUsdGV4dClcblx0XHRsZXQgcGFpciA9IGFuc2lNYXBbbmFtZV1cblx0XHRyZXR1cm4gJ1xcdTAwMWJbJytwYWlyWzBdKydtJyArIHRleHQgKyAnXFx1MDAxYlsnK3BhaXJbMV0rJ20nXG5cbmFuc2kud2FybiA9IGFuc2kueWVsbG93XG5hbnNpLmVycm9yID0gYW5zaS5yZWRcblxuY29uc3Qgbm90V2luID0gcHJvY2Vzcy5wbGF0Zm9ybSAhPT0gJ3dpbjMyJyB8fCBwcm9jZXNzLmVudi5DSSB8fCBwcm9jZXNzLmVudi5URVJNID09PSAneHRlcm0tMjU2Y29sb3InXG5cbiMgaW1wb3J0IG9yYSBmcm9tICdvcmEnXG5cbmNvbnN0IGxvZ1N5bWJvbHMgPSB7XG5cdGluZm86IGFuc2kuZigneWVsbG93QnJpZ2h0Jyxub3RXaW4gPyAnXHUyMTM5JyA6ICdpJylcblx0c3VjY2VzczogYW5zaS5ncmVlbihub3RXaW4gPyAnXHUyNzE0JyA6ICdcdTIyMUEnKVxuXHR3YXJuaW5nOiBhbnNpLnllbGxvdyhub3RXaW4gPyAnXHUyNkEwJyA6ICchIScpXG5cdGVycm9yOiBhbnNpLnJlZChub3RXaW4gPyAnXHUwMEQ3JyA6ICdcdTI3MTYnKVxuXHRkZWJ1ZzogYW5zaS5ibHVlKG5vdFdpbiA/ICdcdTIxMzknIDogJ2knKVxufVxuXG5jb25zdCBsb2dMZXZlbHMgPSBbJ2RlYnVnJywnaW5mbycsJ3N1Y2Nlc3MnLCd3YXJuaW5nJywnZXJyb3InLCdzaWxlbnQnXVxuXG5jb25zdCBhZGRyZXNzVHlwZU5hbWUgPSB7XG5cdFwiLTFcIjogXCJzb2NrZXRcIlxuXHRcIjRcIjogXCJpcDRcIlxuXHRcIjZcIjogXCJpcDZcIlxufVxuXG5leHBvcnQgZGVmIGZvcm1hdE1hcmtkb3duIHN0clxuXHRsZXQgZm10ID0gYW5zaS5mXG5cdFxuXHRzdHIgPSBzdHIucmVwbGFjZSgvaHR0cHM/XFw6W15cXHNcXG5cXClcXF1dKy9nKSBkbyhtKVxuXHRcdCMgZm10KCdpdGFsaWMnLGZtdCgnYmx1ZUJyaWdodCcsbSkpXG5cdFx0Zm10KCdibHVlQnJpZ2h0JyxtKVxuXHRzdHIgPSBzdHIucmVwbGFjZSgvXltcXHRcXHNdKlxcPlteXFxuXSsvZ20pIGRvKG0pXG5cdFx0IyBmbXQoJ2l0YWxpYycsZm10KCdibHVlQnJpZ2h0JyxtKSlcblx0XHRmbXQoJ2JvbGQnLG0pXG5cdFxuXHRzdHIgPSBzdHIucmVwbGFjZSgvXFx0L2csJyAgJylcblx0c3RyID0gc3RyLnJlcGxhY2UoL14vZ20sJyAgJylcblx0c3RyXG5cbmV4cG9ydCBkZWYgZm9ybWF0IHN0ciwuLi5yZXN0XG5cdCMgY29sb3IgbWFya2Rvd24/XG5cblx0bGV0IGZtdCA9IGFuc2kuZlxuXHRzdHIgPSBzdHIucmVwbGFjZSgvXFwlKFtcXHdcXC5dKykvZykgZG8obSxmKVxuXHRcdGxldCBwYXJ0ID0gcmVzdC5zaGlmdCFcblx0XHRpZiBmID09ICdtYXJrZG93bidcblx0XHRcdGZvcm1hdE1hcmtkb3duKHBhcnQpXG5cdFxuXHRcdGVsaWYgZiA9PSAna2InXG5cdFx0XHRmbXQgJ2RpbScsIChwYXJ0IC8gMTAwMCkudG9GaXhlZCgxKSArICdrYidcblx0XHRlbGlmIGYgPT0gJ3BhdGgnIG9yIGYgPT0gJ2JvbGQnXG5cdFx0XHRmbXQoJ2JvbGQnLHBhcnQpXG5cdFx0ZWxpZiBmID09ICdkaW0nXG5cdFx0XHRmbXQoJ2RpbScscGFydClcblx0XHRlbGlmIGYgPT0gJ2FkZHJlc3MnXG5cdFx0XHRsZXQgdHlwID0gYWRkcmVzc1R5cGVOYW1lW3BhcnQuYWRkcmVzc1R5cGVdXG5cdFx0XHRpZiBwYXJ0LnBvcnRcblx0XHRcdFx0IyB3aGF0IGFib3V0IHRoZSBwcm90b2NvbD9cblx0XHRcdFx0Zm10KCdibHVlQnJpZ2h0JyxbcGFydC5hZGRyZXNzIG9yIFwiaHR0cDovLzEyNy4wLjAuMVwiLHBhcnQucG9ydF0uam9pbignOicpKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRmbXQoJ2JsdWVCcmlnaHQnLHR5cClcblx0XHRlbGlmIGYgPT0gJ21zJ1xuXHRcdFx0Zm10KCd5ZWxsb3cnLE1hdGgucm91bmQocGFydCkgKyAnbXMnKVxuXHRcdGVsaWYgZiA9PSAnZCdcblx0XHRcdGZtdCgnYmx1ZUJyaWdodCcscGFydClcblx0XHRlbGlmIGYgPT0gJ3JlZCdcblx0XHRcdGZtdCgncmVkQnJpZ2h0JyxwYXJ0KVxuXHRcdGVsaWYgZiA9PSAnZ3JlZW4nXG5cdFx0XHRmbXQoJ2dyZWVuQnJpZ2h0JyxwYXJ0KVxuXHRcdGVsaWYgZiA9PSAneWVsbG93J1xuXHRcdFx0Zm10KCd5ZWxsb3dCcmlnaHQnLHBhcnQpXG5cdFx0ZWxpZiBmID09ICdyZWYnXG5cdFx0XHRmbXQoJ3llbGxvd0JyaWdodCcsJyMnICsgKHBhcnQuaWQgb3IgcGFydCkpXG5cdFx0ZWxpZiBmID09ICdlbGFwc2VkJ1xuXHRcdFx0cmVzdC51bnNoaWZ0KHBhcnQpIGlmIHBhcnQgIT0gdW5kZWZpbmVkXG5cdFx0XHRsZXQgZWxhcHNlZCA9IHBlcmZvcm1hbmNlLm5vdyEgIyBEYXRlLm5vdyEgLSAjY3RpbWVcblx0XHRcdGZtdCgneWVsbG93JyxNYXRoLnJvdW5kKGVsYXBzZWQpICsgJ21zJylcblx0XHRlbGlmIGYgPT0gJ2hlYXAnXG5cdFx0XHRyZXN0LnVuc2hpZnQocGFydCkgaWYgcGFydCAhPSB1bmRlZmluZWRcblx0XHRcdGxldCB1c2VkID0gcHJvY2Vzcy5tZW1vcnlVc2FnZSEuaGVhcFVzZWQgLyAxMDI0IC8gMTAyNFxuXHRcdFx0Zm10KCd5ZWxsb3cnLHVzZWQudG9GaXhlZCgyKSArICdtYicpXG5cdFx0ZWxzZVxuXHRcdFx0cGFydFxuXG5cdHJldHVybiBbc3RyLC4uLnJlc3RdXG5cbmxldCBTcGlubmVyID0gbnVsbFxubGV0IEluc3RhbmNlID0gbnVsbFxuXG5leHBvcnQgY2xhc3MgTG9nZ2VyXG5cblx0c3RhdGljIGdldCBtYWluXG5cdFx0SW5zdGFuY2UgfHw9IG5ldyBzZWxmXG5cblx0ZGVmIGNvbnN0cnVjdG9yIHtwcmVmaXggPSBudWxsLGxvZ2xldmVsfSA9IHt9XG5cdFx0I2N0aW1lID0gRGF0ZS5ub3chXG5cdFx0c2VsZi5wcmVmaXggPSBwcmVmaXggPyBmb3JtYXQoLi4ucHJlZml4KVswXSA6ICcnXG5cdFx0c2VsZi5sb2dsZXZlbCA9IGxvZ2xldmVsIG9yIHByb2Nlc3MuZW52LklNQkFfTE9HTEVWRUwgb3IgKGdsb2JhbC4jSU1CQV9PUFRJT05TIGFuZCBnbG9iYWwuI0lNQkFfT1BUSU9OUy5sb2dsZXZlbCkgb3IgJ2luZm8nXG5cblx0ZGVmIHdyaXRlIGtpbmQsLi4ucGFydHNcblx0XHRpZiBsb2dMZXZlbHMuaW5kZXhPZihraW5kKSA8IGxvZ0xldmVscy5pbmRleE9mKHNlbGYubG9nbGV2ZWwpXG5cdFx0XHRyZXR1cm4gc2VsZlxuXG5cdFx0bGV0IHN5bSA9IGxvZ1N5bWJvbHNba2luZF0gb3Iga2luZFxuXHRcdGxldCBbc3RyLC4uLnJlc3RdID0gZm9ybWF0KC4uLnBhcnRzKVxuXHRcdHN0ciA9IHByZWZpeCArIHN0ciBpZiBwcmVmaXhcblxuXHRcdGlmICNzcGlubmVyIGFuZCAjc3Bpbm5lci5pc1NwaW5uaW5nXG5cdFx0XHQjIGNvbnNvbGUubG9nICdzZXQgdGV4dCBvbiBzcGlubmVyISEhJ1xuXHRcdFx0aWYga2luZCA9PSAnc3VjY2Vzcydcblx0XHRcdFx0I3NwaW5uZXIuY2xlYXIhXG5cdFx0XHRcdGNvbnNvbGUubG9nKHN5bSArICcgJyArIHN0ciwuLi5yZXN0KVxuXHRcdFx0XHQjc3Bpbm5lci5mcmFtZSFcblxuXHRcdFx0I3NwaW5uZXIudGV4dCA9IHN0clxuXHRcdGVsc2Vcblx0XHRcdGNvbnNvbGUubG9nKHN5bSArICcgJyArIHN0ciwuLi5yZXN0KVxuXHRcblx0ZGVmIGRlYnVnIC4uLnBhcnMgZG8gd3JpdGUoJ2RlYnVnJywuLi5wYXJzKVxuXHRkZWYgbG9nIC4uLnBhcnMgZG8gd3JpdGUoJ2luZm8nLC4uLnBhcnMpXG5cdGRlZiBpbmZvIC4uLnBhcnMgZG8gd3JpdGUoJ2luZm8nLC4uLnBhcnMpXG5cdGRlZiB3YXJuIC4uLnBhcnMgZG8gd3JpdGUoJ3dhcm4nLC4uLnBhcnMpXG5cdGRlZiBlcnJvciAuLi5wYXJzIGRvIHdyaXRlKCdlcnJvcicsLi4ucGFycylcblx0ZGVmIHN1Y2Nlc3MgLi4ucGFycyBkbyB3cml0ZSgnc3VjY2VzcycsLi4ucGFycylcblxuXHRkZWYgdHMgLi4ucGFycyBkbyB3cml0ZSgnZGVidWcnLC4uLnBhcnMscGVyZm9ybWFuY2Uubm93ISlcblxuXHRkZWYgc3Bpbm5lclxuXHRcdHJldHVyblxuXHRcdFNwaW5uZXIgPSBvcmEoJ0xvYWRpbmcnKS5zdGFydCFcblxuXHRnZXQgI3NwaW5uZXJcblx0XHRTcGlubmVyXG5cblx0Z2V0IHByb3h5XG5cdFx0bGV0IGZuID0gZG8oLi4ucGFycykgaW5mbyguLi5wYXJzKVxuXHRcdGZuLmluZm8gPSBpbmZvLmJpbmQoc2VsZilcblx0XHRmbi53YXJuID0gd2Fybi5iaW5kKHNlbGYpXG5cdFx0Zm4uZXJyb3IgPSBlcnJvci5iaW5kKHNlbGYpXG5cdFx0Zm4uZGVidWcgPSBkZWJ1Zy5iaW5kKHNlbGYpXG5cdFx0Zm4uc3VjY2VzcyA9IHN1Y2Nlc3MuYmluZChzZWxmKVxuXHRcdGZuLnRzID0gdHMuYmluZChzZWxmKVxuXHRcdGZuLmxvZ2dlciA9IHNlbGZcblx0XHRyZXR1cm4gZm5cblxuXHRkZWYgdGltZSBsYWJlbCwgY2Jcblx0XHRsZXQgdCA9IERhdGUubm93IVxuXHRcdGlmIGNiXG5cdFx0XHRsZXQgcmVzID0gYXdhaXQgY2IoKVxuXHRcdFx0aW5mbyBcIntsYWJlbH0gJW1zXCIsRGF0ZS5ub3chIC0gdFxuXHRcdFx0cmV0dXJuIHJlc1xuXG5leHBvcnQgZGVmYXVsdCAobmV3IExvZ2dlcikucHJveHkiLCAiIyBjcmVhdGUgcHJveHlcblxuaW1wb3J0IHttYW5pZmVzdH0gZnJvbSAnLi9tYW5pZmVzdCdcblxuY2xhc3MgQXNzZXRQcm94eVxuXHRzdGF0aWMgZGVmIHdyYXAgbWV0YVxuXHRcdGxldCBoYW5kbGVyID0gbmV3IEFzc2V0UHJveHkobWV0YSlcblx0XHRuZXcgUHJveHkoaGFuZGxlcixoYW5kbGVyKVxuXG5cdGRlZiBjb25zdHJ1Y3RvciBtZXRhXG5cdFx0bWV0YSA9IG1ldGFcblxuXHRnZXQgaW5wdXRcblx0XHRtYW5pZmVzdC5pbnB1dHNbbWV0YS5pbnB1dF1cblxuXHRnZXQgYXNzZXRcblx0XHRnbG9iYWxUaGlzLl9NRl8gPyBtZXRhIDogKGlucHV0ID8gaW5wdXQuYXNzZXQgOiBudWxsKVxuXHRcblx0ZGVmIHNldCB0YXJnZXQsIGtleSwgdmFsdWVcblx0XHRyZXR1cm4gdHJ1ZVxuXG5cdGRlZiBnZXQgdGFyZ2V0LCBrZXlcblx0XHRpZiBtZXRhLm1ldGEgYW5kIG1ldGEubWV0YVtrZXldICE9IHVuZGVmaW5lZFxuXHRcdFx0cmV0dXJuIG1ldGEubWV0YVtrZXldXG5cdFx0XHRcblx0XHR1bmxlc3MgYXNzZXRcblx0XHRcdGlmIG1ldGEuI3dhcm5lZCA9PyB5ZXNcblx0XHRcdFx0Y29uc29sZS53YXJuIFwiQXNzZXQgZm9yICd7bWV0YS5pbnB1dH0nIG5vdCBmb3VuZFwiXG5cblx0XHRcdGlmIGtleSA9PSAndmFsdWVPZidcblx0XHRcdFx0cmV0dXJuIGRvIFwiXCJcblx0XHRcdHJldHVybiBudWxsXG5cdFx0XHRcblx0XHRpZiBrZXkgPT0gJ2Fic1BhdGgnIGFuZCAhYXNzZXQuYWJzUGF0aFxuXHRcdFx0cmV0dXJuIGFzc2V0LnVybFx0XG5cblx0XHRhc3NldFtrZXldXG5cbmNsYXNzIFNWR0Fzc2V0XG5cdHByb3AgdXJsXG5cdHByb3AgbWV0YVxuXG5cdGRlZiBhZG9wdE5vZGUgbm9kZVxuXHRcdGlmIG1ldGEuLmNvbnRlbnRcblx0XHRcdGZvciBvd24gayx2IG9mIG1ldGEuYXR0cmlidXRlc1xuXHRcdFx0XHRub2RlLnNldEF0dHJpYnV0ZShrLHYpXG5cdFx0XHRub2RlLmlubmVySFRNTCA9IG1ldGEuY29udGVudFxuXHRcdHNlbGZcblx0XG5cdGRlZiB0b1N0cmluZ1xuXHRcdHVybFxuXHRcblx0ZGVmIHRvU3R5bGVTdHJpbmdcblx0XHRcInVybCh7dXJsfSlcIlxuXG5cbmV4cG9ydCBkZWYgYXNzZXQgZGF0YVxuXHRpZiBkYXRhLiNhc3NldFxuXHRcdHJldHVybiBkYXRhLiNhc3NldFxuXG5cdGlmIGRhdGEudHlwZSA9PSAnc3ZnJ1xuXHRcdHJldHVybiBkYXRhLiNhc3NldCB8fD0gbmV3IFNWR0Fzc2V0KGRhdGEpXG5cdFxuXHRpZiBkYXRhLmlucHV0XG5cdFx0bGV0IGV4dHJhID0gZ2xvYmFsVGhpcy5fTUZfIGFuZCBnbG9iYWxUaGlzLl9NRl9bZGF0YS5pbnB1dF1cblx0XHRpZiBleHRyYVxuXHRcdFx0T2JqZWN0LmFzc2lnbihkYXRhLGV4dHJhKVxuXHRcdFx0ZGF0YS50b1N0cmluZyA9IGRvIHRoaXMuYWJzUGF0aFxuXHRcdFx0IyBkYXRhLiNhc3NldCA9IGRhdGFcblx0XHRyZXR1cm4gZGF0YS4jYXNzZXQgfHw9IEFzc2V0UHJveHkud3JhcChkYXRhKVxuXHRcblx0cmV0dXJuIGRhdGEiLCAiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcydcbmltcG9ydCBpbmRleCBmcm9tICcuLi9jbGllbnQvaW5kZXguaHRtbCdcblxuY29uc3QgYXBwID0gZXhwcmVzcyFcblxuIyBjYXRjaC1hbGwgcm91dGUgdGhhdCByZXR1cm5zIG91ciBpbmRleC5odG1sXG5hcHAuZ2V0KC8uKi8pIGRvKHJlcSxyZXMpXG5cdCMgb25seSByZW5kZXIgdGhlIGh0bWwgZm9yIHJlcXVlc3RzIHRoYXQgcHJlZmVyIGFuIGh0bWwgcmVzcG9uc2Vcblx0dW5sZXNzIHJlcS5hY2NlcHRzKFsnaW1hZ2UvKicsICdodG1sJ10pID09ICdodG1sJ1xuXHRcdHJldHVybiByZXMuc2VuZFN0YXR1cyg0MDQpXG5cblx0cmVzLnNlbmQgaW5kZXguYm9keVxuXG5pbWJhLnNlcnZlIGFwcC5saXN0ZW4ocHJvY2Vzcy5lbnYuUE9SVCBvciAzMDAwKSIsICJpbXBvcnQge2Fzc2V0fSBmcm9tICdpbWJhJztcbmV4cG9ydCBkZWZhdWx0IGFzc2V0KHtcImlucHV0XCI6XCJlbnRyeTphcHAvY2xpZW50L2luZGV4Lmh0bWxcIn0pIl0sCiAgIm1hcHBpbmdzIjogIjtndUJBaUVPLFdBQW9CLEVBQU0sRUFBVSxLQUFJLENBQzFDLEdBQUEsR0FBVSxHQUNWLEVBQU0sY0FDTixFQUFTLFNBQUcsRUFBTSxDQUNyQixNQUFPLEdBQVEsSUFBUixHQUFRLEdBQVcsRUFBVSxFQUFRLEdBQVMsS0FFbEQsRUFBUyxTQUFHLEVBQUksRUFBTSxDQUN6QixHQUFVLE1BQUEsSUFBUyxVQUNsQixHQUFHLEVBQU0sSUFBTSxLQUFRLEVBQUksS0FBSyxHQUMvQixNQUFPLEdBQU8sV0FDSixNQUFBLElBQU8sVUFBYSxFQUFJLElBQU0sS0FBUSxFQUFJLEtBQUssR0FBSSxDQUMxRCxHQUFBLEdBQU0sRUFBTyxHQUNqQixjQUFPLE9BQU8sRUFBSSxHQUNYLEVBRVIsTUFBTyxJQUdSLE1BRGEsTUFBSyxNQUFNLEVBQUssR0FHdkIsV0FBa0IsRUFBTSxFQUFJLGFBQzlCLEdBQUEsR0FBUSxHQUNSLEVBQU8sQ0FDVixNQUFPLEdBQ1AsUUFBUyxHQUNULFFBQVMsR0FDVCxJQUFLLEdBQ0wsS0FBTSxJQUdQLEdBQUcsRUFBSyxPQUNQLE9BQUcsR0FBQSxFQUFBLEVBQUEsRUFBUyxFQUFLLFFBQU0sRUFBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLElBQUEsSUFBbkIsR0FBSSxFQUFBLEdBQ0gsRUFBTSxFQUFLLGNBQWdCLEVBQUssS0FDcEMsRUFBTSxHQUFPLEVBQ1YsRUFBSyxLQUVQLElBQUEsRUFBSyxNQUFLLEVB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
